<Type Name="EnvironmentPermission" FullName="System.Security.Permissions.EnvironmentPermission" FullNameSP="System_Security_Permissions_EnvironmentPermission" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed serializable EnvironmentPermission extends System.Security.CodeAccessPermission" />
  <TypeSignature Language="C#" Value="public sealed class EnvironmentPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IBuiltInPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EnvironmentPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IBuiltInPermission, class System.Security.Permissions.IUnrestrictedPermission" />
  <MemberOfLibrary>BCL</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <ThreadingSafetyStatement>All public static members of this type are safe for multithreaded operations. No instance members are guaranteed to be thread safe.</ThreadingSafetyStatement>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IBuiltInPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para> Controls access to environment variables.</para>
    </summary>
    <remarks>
      <block subset="none" type="note">
        <para>
          <see cref="T:System.Security.Permissions.EnvironmentPermission" /> objects
      describe protected operations on environment variables. This permission
      distinguishes between the following types of access provided by <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" />:</para>
        <list type="bullet">
          <item>
            <term>
              <see langword="Read" />: Read 
         values from environment variables.</term>
          </item>
          <item>
            <term>
              <see langword="Write" />: Write 
         values to environment variables. Also allows for creating and deleting values.</term>
          </item>
          <item>
            <term>
              <see langword="NoAccess" />: No 
         access to environment variables.</term>
          </item>
          <item>
            <term>
              <see langword="AllAccess" />: Full
         access to environment variables. Identical to specifying
      <see langword="Read" /> and <see langword="Write" />
      access.</term>
          </item>
        </list>
        <para>These access levels are independent, meaning that rights
   to one do not imply rights to another. For example, <see langword="Write " />permission does not imply permission to
<see langword="Read" />. <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> values 
   can be combined using a bitwise OR operator.</para>
        <para>The <see cref="T:System.Environment" /> class is
used to access environment variables, subject to the permissions defined by
<see cref="T:System.Security.Permissions.EnvironmentPermission" />. 
Environment variables are case-insensitive. </para>
      </block>
      <SPAN />
      <para>The XML encoding of a <see cref="T:System.Security.Permissions.EnvironmentPermission" /> instance is defined below in
   EBNF format. The following conventions are used: </para>
      <list type="bullet">
        <item>
          <term>
            <para>All non-literals in the grammar below are shown in
         normal type.</para>
          </term>
        </item>
        <item>
          <term>
            <para>All literals are in bold font. </para>
          </term>
        </item>
      </list>
      <para>The following meta-language symbols are used: </para>
      <list type="bullet">
        <item>
          <term>
         
         '*' represents a meta-language symbol suffixing an
         expression that can appear zero or more times.</term>
        </item>
        <item>
          <term>
         
         '?' represents a meta-language symbol suffixing an
         expression that can appear zero or one time.</term>
        </item>
        <item>
          <term>
         
         '+' represents a meta-language symbol suffixing an
         expression that can appear one or more times.</term>
        </item>
        <item>
          <term>
         
         '(',')' is used to group literals, non-literals or a
         mixture of literals and non-literals.</term>
        </item>
        <item>
          <term>
         
         '|' denotes an exclusive disjunction between two
         expressions.</term>
        </item>
        <item>
          <term>
         
         '::=' denotes a production rule where a left hand
         non-literal is replaced by a right hand expression containing literals,
         non-literals or both.</term>
        </item>
      </list>
      <para>BuildVersion refers to the build version of the shipping
   CLI. This is specified as a dotted build number such as '2412.0' . </para>
      <para>ECMAPubKeyToken ::= <see langword="b77a5c561934e089" /></para>
      <para> EnvironmentVariable refers to the name of a single environment variable,
   such as 'PROMPT'. </para>
      <para> The XML encoding of an
<see langword="EnvironmentPermission" /> instance
   is as follows: </para>
      <c>
        <para>EnvironmentPermissionXML ::=</para>
        <para>
          <see langword="&lt;IPermission " />
        </para>
        <para>
          <see langword="class=&quot; " />
        </para>
        <para>
          <see langword="System.Security.Permissions.EnvironmentPermission, " />
        </para>
        <para>
          <see langword="mscorlib, " />
        </para>
        <para>
          <see langword="Version=1.0." />BuildVersion<see langword="," /></para>
        <para>
          <see langword="Culture=neutral," />
        </para>
        <para>
          <see langword="PublicKeyToken=" />ECMAPubKeyToken<see langword="&quot;" /></para>
        <para>
          <see langword="version=&quot;1&quot;" />
        </para>
        <para>(</para>
        <para>
          <see langword="Unrestricted=&quot;true&quot; " />
        </para>
        <para>) </para>
        <para>| </para>
        <para>( </para>
        <para>(<see langword="Read=&quot;" />
EnvironmentVariable (<see langword=";" />
EnvironmentVariable)*<see langword="&quot;" /> )? </para>
        <para>(<see langword="Write=&quot;" />EnvironmentVariable (<see langword=";" />
EnvironmentVariable)* <see langword="&quot;" /> )? </para>
        <para>) </para>
        <para>
          <see langword="/&gt;" />
        </para>
      </c>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state)" />
      <MemberSignature Language="C#" Value="public EnvironmentPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">A <see cref="T:System.Security.Permissions.PermissionState" /> value.</param>
        <summary>
          <para>Constructs and initializes a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermission" /> class
   with the specified <see cref="T:System.Security.Permissions.PermissionState" /> value.</para>
        </summary>
        <remarks>
          <block subset="none" type="note">
            <para> The instance returned by this constructor has either
         fully restricted (<see cref="F:System.Security.Permissions.PermissionState.None" />) or unrestricted
         (<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />) access to all environment
         variables.</para>
          </block>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="state" /> is not a valid <see cref="T:System.Security.Permissions.PermissionState" /> value.</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILASM" Value="public rtspecialname specialname instance void .ctor(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList)" />
      <MemberSignature Language="C#" Value="public EnvironmentPermission (System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue />
      <Parameters>
        <Parameter Name="flag" Type="System.Security.Permissions.EnvironmentPermissionAccess" />
        <Parameter Name="pathList" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="flag">One of values defined by <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" />. </param>
        <param name="pathList">A <see cref="T:System.String" /> containing one or more case-insensitive environment variable names separated by <see cref="F:System.IO.Path.PathSeparator" qualify="true" />. </param>
        <summary>
          <para>Constructs a new instance of the <see cref="T:System.Security.Permissions.EnvironmentPermission" />
class with the specified access to
the specified environment variables.</para>
        </summary>
        <remarks>
          <para>The specified access is applied to all environment
   variables in <paramref name="pathList" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <paramref name="pathList" /> is <see langword="null" />. </para>
        </exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="flag" /> specifies a value not defined in <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" />. </para>
        </exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="AddPathList">
      <MemberSignature Language="C#" Value="public void AddPathList (System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPathList(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Security.Permissions.EnvironmentPermissionAccess" />
        <Parameter Name="pathList" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="pathList">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual class System.Security.IPermission Copy()" />
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para> Returns a new <see cref="T:System.Security.Permissions.EnvironmentPermission" /> object
 containing the same values as the current instance.</para>
        </summary>
        <returns>
          <para>A new <see cref="T:System.Security.Permissions.EnvironmentPermission" />
containing the
same values as the current instance.</para>
        </returns>
        <remarks>
          <para>
            <block subset="none" type="note">The object returned by this method represents the
 same level of access to the same environment variables as the current instance.</block>
          </para>
          <para>This method overrides <see cref="M:System.Security.CodeAccessPermission.Copy" /> and is implemented to
 support the <see cref="T:System.Security.IPermission" /> interface.</para>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual void FromXml(class System.Security.SecurityElement esd)" />
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement esd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement esd) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="esd" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="esd">A <see cref="T:System.Security.SecurityElement" /> instance containing the XML encoding to use to reconstruct the state of a <see cref="T:System.Security.Permissions.EnvironmentPermission" /> object.</param>
        <summary>
          <para> Reconstructs the state of a <see cref="T:System.Security.Permissions.EnvironmentPermission" /> object
 using the specified XML encoding.</para>
        </summary>
        <remarks>
          <para>The state of the current instance is changed to the
 state encoded in <paramref name="esd" />.</para>
          <block subset="none" type="note">
            <para>For the XML encoding for this class, see the <see cref="T:System.Security.Permissions.EnvironmentPermission" /> class
 page.</para>
            <para>This method overrides <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />.</para>
          </block>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="esd" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <para>
            <paramref name="esd" /> does not contain the encoding for a <see cref="T:System.Security.Permissions.EnvironmentPermission" /> instance.</para>
          <para>The version number of <paramref name="esd" /> is not valid.</para>
        </exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="GetPathList">
      <MemberSignature Language="C#" Value="public string GetPathList (System.Security.Permissions.EnvironmentPermissionAccess flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPathList(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Security.Permissions.EnvironmentPermissionAccess" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual class System.Security.IPermission Intersect(class System.Security.IPermission target)" />
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A <see cref="T:System.Security.Permissions.EnvironmentPermission" /> instance to intersect with the current instance.</param>
        <summary>
          <para>Returns a new <see cref="T:System.Security.Permissions.EnvironmentPermission" /> object that is the intersection of
 the current instance and the specified object. </para>
        </summary>
        <returns>
          <para>A new <see cref="T:System.Security.Permissions.EnvironmentPermission" /> instance that
 represents the intersection of the current instance and <paramref name="target" />. If the intersection is empty or <paramref name="target" />
 is <see langword="null" />, returns <see langword="null" />. If the current instance is unrestricted, returns a copy of <paramref name="target" />. If
<paramref name="target" /> is unrestricted, returns a copy of the current instance.</para>
        </returns>
        <remarks>
          <block subset="none" type="note">
            <para>The intersection of two permissions is a permission that secures the
 resources and operations secured by both permissions. Specifically, it
 represents the minimum permission such that any demand that passes both
 permissions will also pass their intersection.</para>
            <para>This method overrides <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" /> and is implemented to
 support the <see cref="T:System.Security.IPermission" /> interface.</para>
          </block>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> is not <see langword="null" /> and is not of type <see cref="T:System.Security.Permissions.EnvironmentPermission" />. </exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual bool IsSubsetOf(class System.Security.IPermission target)" />
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">A <see cref="T:System.Security.Permissions.EnvironmentPermission" /> instance that is to be tested for the subset relationship.</param>
        <summary>
          <para>Determines whether the current instance is a subset of the specified
      object.</para>
        </summary>
        <returns>
          <para>
            <see langword="true" /> if the
   current instance is a subset of <paramref name="target" />
   ; otherwise,<see langword=" false" />. If the current instance is unrestricted, and <paramref name="target" /> is
   not, returns <see langword="false" />. If <paramref name="target" /> is
   unrestricted, returns <see langword="true" />. If
<paramref name="target" /> is <see langword="null" /> and no environment variables are 
   secured by the current instance, returns <see langword="true" />. If target is
<see langword="null" />, and the current instance secures one or more environment 
   variables, returns <see langword="false" />.</para>
        </returns>
        <remarks>
          <block subset="none" type="note">
            <para>The current instance is a subset of <paramref name="target" /> if the current instance
      specifies a set of accesses to resources that is wholly contained by
   <paramref name="target" />. For example, a permission that represents read access to a file
      is a subset of a permission that represents read and write access to the file. </para>
            <para>If this method returns <see langword="true" /> , the current instance describes a
   level of access to a set of environment variables that is also described by
<paramref name="target" />.</para>
            <para>This method overrides <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" /> and is implemented to
support the <see cref="T:System.Security.IPermission" /> interface.</para>
          </block>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> is not <see langword="null" /> and is not of type <see cref="T:System.Security.Permissions.EnvironmentPermission" /> .</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPathList">
      <MemberSignature Language="C#" Value="public void SetPathList (System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPathList(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Security.Permissions.EnvironmentPermissionAccess" />
        <Parameter Name="pathList" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="pathList">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.Permissions.IBuiltInPermission.GetTokenIndex">
      <MemberSignature Language="C#" Value="int IBuiltInPermission.GetTokenIndex ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Security.Permissions.IBuiltInPermission.GetTokenIndex() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual class System.Security.SecurityElement ToXml()" />
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Returns the XML encoding of the current instance.</para>
        </summary>
        <returns>
          <para>A <see cref="T:System.Security.SecurityElement" /> containing the XML encoding of the state of the current instance.</para>
        </returns>
        <remarks>
          <block subset="none" type="note">
            <para>For the XML encoding for this class, see the <see cref="T:System.Security.Permissions.EnvironmentPermission" /> class
 page.</para>
            <para>This method overrides <see cref="M:System.Security.CodeAccessPermission.ToXml" /> .</para>
          </block>
        </remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="ILASM" Value=".method public hidebysig virtual class System.Security.IPermission Union(class System.Security.IPermission other)" />
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">A <see cref="T:System.Security.Permissions.EnvironmentPermission" /> instance to combine with the current instance.</param>
        <summary>
          <para>Returns a new <see cref="T:System.Security.Permissions.EnvironmentPermission" /> that is the union of the
 current instance and the specified object.</para>
        </summary>
        <returns>
          <para>A new <see cref="T:System.Security.Permissions.EnvironmentPermission" /> instance that represents the union
 of the current instance and <paramref name="other" /> . If the current
 instance or <paramref name="other " /> is unrestricted, returns a
<see cref="T:System.Security.Permissions.EnvironmentPermission" /> 
instance that is unrestricted. If <paramref name="other" /> is <see langword="null" />,
returns a copy of the current instance via the <see cref="M:System.Security.IPermission.Copy" /> method.
If the current instance and <paramref name="other" /> do not specify any environment
variables, returns <see langword="null" />
.</para>
        </returns>
        <remarks>
          <block subset="none" type="note">
            <para>The result of a call to <see cref="M:System.Security.Permissions.EnvironmentPermission.Union(System.Security.IPermission)" /> is
 a permission that represents the access to
 environment variables represented by the current instance as well as the access to
 environment variables represented by <paramref name="other" />. Any demand that passes either the current
 instance or <paramref name="other" /> passes their union.</para>
            <para>This method overrides <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" /> and is implemented to
 support the <see cref="T:System.Security.IPermission" /> interface.</para>
          </block>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other " /> is not <see langword="null" /> and is not of type <see cref="T:System.Security.Permissions.EnvironmentPermission" /> .</exception>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>
