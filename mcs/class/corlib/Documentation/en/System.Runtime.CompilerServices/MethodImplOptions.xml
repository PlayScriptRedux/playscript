<Type Name="MethodImplOptions" FullName="System.Runtime.CompilerServices.MethodImplOptions" FullNameSP="System_Runtime_CompilerServices_MethodImplOptions" Maintainer="ecma">
  <TypeSignature Language="ILASM" Value=".class public sealed serializable MethodImplOptions extends System.Enum" />
  <TypeSignature Language="C#" Value="public enum MethodImplOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed MethodImplOptions extends System.Enum" />
  <MemberOfLibrary>RuntimeInfrastructure</MemberOfLibrary>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyPublicKey>[00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 ]</AssemblyPublicKey>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Defines the details of how a method is implemented.</para>
    </summary>
    <remarks>
      <para>This enumeration is used by <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" />.
   </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AggressiveInlining">
      <MemberSignature Language="C#" Value="AggressiveInlining" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions AggressiveInlining = int32(256)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="ForwardRef">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions ForwardRef = 16" />
      <MemberSignature Language="C#" Value="ForwardRef" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions ForwardRef = int32(16)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>ForwardRef</MemberValue>
      <Docs>
        <summary>
          <para> Specifies that the method is declared, but its implementation is
      provided elsewhere. </para>
          <para>
            <block subset="none" type="note">For most languages, it is recommended 
      that the notion of "forward" be attached to methods using language syntax
      instead of custom attributes. </block>
          </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="InternalCall">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions InternalCall = 4096" />
      <MemberSignature Language="C#" Value="InternalCall" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions InternalCall = int32(4096)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>InternalCall</MemberValue>
      <Docs>
        <summary>
          <para>Specifies an internal call.</para>
          <para>
            <block subset="none" type="note">An internal call
      is a call to a method implemented within the system itself, providing
      additional functionality that regular managed code cannot provide. <see cref="M:System.Object.MemberwiseClone" />
      is an example of an internally called method.</block>
          </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NoInlining">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions NoInlining = 8" />
      <MemberSignature Language="C#" Value="NoInlining" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions NoInlining = int32(8)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>NoInlining</MemberValue>
      <Docs>
        <summary>
          <para>Specifies that the method is not permitted to be inlined.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="NoOptimization">
      <MemberSignature Language="C#" Value="NoOptimization" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions NoOptimization = int32(64)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="PreserveSig" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions PreserveSig = int32(128)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <MemberValue>PreserveSig</MemberValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions Synchronized = 32" />
      <MemberSignature Language="C#" Value="Synchronized" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions Synchronized = int32(32)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>Synchronized</MemberValue>
      <Docs>
        <summary>
          <para>Specifies the method can be executed by only one thread at a time.</para>
          <para>This option specifies that before a thread can execute the target method, the
      thread is required to acquire a lock on either the current
      instance or the <see cref="T:System.Type" />
      object for the method's class. If the target method is an instance method, the
      lock is on the current instance. If the target is a static method, the lock is
      on the <see cref="T:System.Type" /> object. Specifying this option causes the target method to behave as though its
      statements are enclosed by <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> and <see cref="M:System.Threading.Monitor.Exit(System.Object)" />
      statements locking the previous described object. This option and the <see cref="T:System.Threading.Monitor" /> methods are functionally equivalent, and both
      are functionally equivalent to enclosing the target method's code in a C# lock
      (this)
      statement. </para>
          <block subset="none" type="note">
            <para>Because this option holds the lock for
         the duration of the target method, it should be used only when the entire method
         must be single threaded. Use the <see cref="T:System.Threading.Monitor" /> methods (or the C#
         lock statement) if the object lock can be taken after the method begins, or
         released before the method ends. Any mechanism that uses locks can cause an
         application to experience deadlocks and performance degradation; for these
         reasons, use this option with care.</para>
            <para> For most languages, it is recommended that the notion of
         "synchronized" be attached to methods using language syntax instead of custom
         attributes.</para>
          </block>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
    <Member MemberName="Unmanaged">
      <MemberSignature Language="ILASM" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions Unmanaged = 4" />
      <MemberSignature Language="C#" Value="Unmanaged" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.CompilerServices.MethodImplOptions Unmanaged = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.MethodImplOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <MemberValue>Unmanaged</MemberValue>
      <Docs>
        <summary>
          <para>Specifies that the method is implemented in unmanaged code.</para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
      <Excluded>0</Excluded>
    </Member>
  </Members>
  <TypeExcluded>0</TypeExcluded>
</Type>
