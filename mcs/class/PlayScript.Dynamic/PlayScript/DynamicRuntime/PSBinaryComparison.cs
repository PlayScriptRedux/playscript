		
//
// PSBinaryComparison.cs
//
// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

#if !DYNAMIC_SUPPORT

using System;

//
// WARNING: This code is autogenerated. Edit PSBinaryComparison.tt to make changes.
//
namespace PlayScript.DynamicRuntime
{
	public static class PSBinaryComparison
	{
		public static bool LessThanObjInt (object a, int b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is int)
				return (int)a < b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 < b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) < (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value < (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanIntObj (int a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is int)
				return a < (int)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a < 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a < Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a < value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanOrEqualObjInt (object a, int b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is int)
				return (int)a <= b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 <= b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) <= (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value <= (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanOrEqualIntObj (int a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is int)
				return a <= (int)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a <= 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a <= Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a <= value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanObjInt (object a, int b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is int)
				return (int)a > b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 > b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) > (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value > (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanIntObj (int a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is int)
				return a > (int)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a > 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a > Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a > value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanOrEqualObjInt (object a, int b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is int)
				return (int)a >= b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 >= b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) >= (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value >= (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanOrEqualIntObj (int a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is int)
				return a >= (int)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a >= 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a >= Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a >= value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool EqualityObjInt (object a, int b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is int)
				return (int)a == b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 == b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) == (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value == (double)b;
				return false; // if a can't be parsed into a number, then it can't be equal
			}

			return false;
		}

		public static bool EqualityIntObj (int a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is int)
				return a == (int)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a == 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a == Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a == value;
				return false; // if b can't be parsed into a number, then it can't be equal
			}

			return false;
		}

		public static bool LessThanObjUInt (object a, uint b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is uint)
				return (uint)a < b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 < b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) < (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value < (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanUIntObj (uint a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is uint)
				return a < (uint)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a < 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a < Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a < value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanOrEqualObjUInt (object a, uint b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is uint)
				return (uint)a <= b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 <= b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) <= (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value <= (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanOrEqualUIntObj (uint a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is uint)
				return a <= (uint)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a <= 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a <= Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a <= value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanObjUInt (object a, uint b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is uint)
				return (uint)a > b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 > b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) > (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value > (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanUIntObj (uint a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is uint)
				return a > (uint)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a > 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a > Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a > value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanOrEqualObjUInt (object a, uint b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is uint)
				return (uint)a >= b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 >= b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) >= (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value >= (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanOrEqualUIntObj (uint a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is uint)
				return a >= (uint)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a >= 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a >= Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a >= value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool EqualityObjUInt (object a, uint b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is uint)
				return (uint)a == b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 == b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) == (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value == (double)b;
				return false; // if a can't be parsed into a number, then it can't be equal
			}

			return false;
		}

		public static bool EqualityUIntObj (uint a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is uint)
				return a == (uint)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a == 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a == Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a == value;
				return false; // if b can't be parsed into a number, then it can't be equal
			}

			return false;
		}

		public static bool LessThanObjDouble (object a, double b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is double)
				return (double)a < b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 < b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) < (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value < (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanDoubleObj (double a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is double)
				return a < (double)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a < 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a < Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a < value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanOrEqualObjDouble (object a, double b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is double)
				return (double)a <= b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 <= b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) <= (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value <= (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool LessThanOrEqualDoubleObj (double a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is double)
				return a <= (double)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a <= 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a <= Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a <= value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanObjDouble (object a, double b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is double)
				return (double)a > b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 > b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) > (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value > (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanDoubleObj (double a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is double)
				return a > (double)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a > 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a > Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a > value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanOrEqualObjDouble (object a, double b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is double)
				return (double)a >= b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 >= b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) >= (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value >= (double)b;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool GreaterThanOrEqualDoubleObj (double a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is double)
				return a >= (double)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a >= 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a >= Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a >= value;
				return false; // any numeric comparision with a string results in false
			}

			return false;
		}

		public static bool EqualityObjDouble (object a, double b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is double)
				return (double)a == b;

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return 0 == b; // null converts to 0

			if (IsNumeric (a) || a is bool)
				return Convert.ToDouble (a) == (double)b;

			if (a is string) {
				double value;
				if (Double.TryParse ((string)a, out value))
					return value == (double)b;
				return false; // if a can't be parsed into a number, then it can't be equal
			}

			return false;
		}

		public static bool EqualityDoubleObj (double a, object b)
		{
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is double)
				return a == (double)b;

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a == 0; // null converts to 0

			if (IsNumeric (b) || b is bool)
				return (double)a == Convert.ToDouble (b);

			if (b is string) {
				double value;
				if (Double.TryParse ((string)b, out value))
					return (double)a == value;
				return false; // if b can't be parsed into a number, then it can't be equal
			}

			return false;
		}

		public static bool LessThanStringObj (string a, object b)
		{
			if (IsNumeric (b) || b is bool) {
				if (b is int)
					return LessThanObjInt (a, (int)b);
				else if (b is uint)
					return LessThanObjUInt (a, (uint)b);
				return LessThanObjDouble (a, Convert.ToDouble (b));
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a, b.ToString ()) < 0;
		}

		public static bool LessThanObjString (object a, string b)
		{
			if (IsNumeric (a) || a is bool) {
				if (a is int)
					return LessThanIntObj ((int)a, b);
				else if (a is uint)
					return LessThanUIntObj ((uint)a, b);
				return LessThanDoubleObj (Convert.ToDouble (a), b);
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return b == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a.ToString (), b) < 0;
		}

		public static bool LessThanOrEqualStringObj (string a, object b)
		{
			if (IsNumeric (b) || b is bool) {
				if (b is int)
					return LessThanOrEqualObjInt (a, (int)b);
				else if (b is uint)
					return LessThanOrEqualObjUInt (a, (uint)b);
				return LessThanOrEqualObjDouble (a, Convert.ToDouble (b));
			}
			
			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a, b.ToString ()) <= 0;
		}

		public static bool LessThanOrEqualObjString (object a, string b)
		{
			if (IsNumeric (a) || a is bool) {
				if (a is int)
					return LessThanIntObj ((int)a, b);
				else if (a is uint)
					return LessThanUIntObj ((uint)a, b);
				return LessThanDoubleObj (Convert.ToDouble (a), b);
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return b == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a.ToString (), b) <= 0;
		}

		public static bool GreaterThanStringObj (string a, object b)
		{
			if (IsNumeric (b) || b is bool) {
				if (b is int)
					return GreaterThanObjInt (a, (int)b);
				else if (b is uint)
					return LessThanObjUInt (a, (uint)b);
				return GreaterThanObjDouble (a, Convert.ToDouble (b));
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a, b.ToString ()) > 0;
		}

		public static bool GreaterThanObjString (object a, string b)
		{
			if (IsNumeric (a) || a is bool) {
				if (a is int)
					return GreaterThanIntObj ((int)a, b);
				else if (a is uint)
					return GreaterThanUIntObj ((uint)a, b);
				return GreaterThanDoubleObj (Convert.ToDouble (a), b);
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return b == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a.ToString (), b) > 0;
		}

		public static bool GreaterThanOrEqualStringObj (string a, object b)
		{
			if (IsNumeric (b) || b is bool) {
				if (b is int)
					return GreaterThanOrEqualObjInt (a, (int)b);
				else if (b is uint)
					return LessThanOrEqualObjUInt (a, (uint)b);
				return GreaterThanOrEqualObjDouble (a, Convert.ToDouble (b));
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (b))
				return false; // any comparision with undefined results in false

			if (b == null)
				return a == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a, b.ToString ()) >= 0;
		}

		public static bool GreaterThanOrEqualObjString (object a, string b)
		{
			if (IsNumeric (a) || a is bool) {
				if (a is int)
					return GreaterThanOrEqualIntObj ((int)a, b);
				else if (a is uint)
					return GreaterThanOrEqualUIntObj ((uint)a, b);
				return GreaterThanOrEqualDoubleObj (Convert.ToDouble (a), b);
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (Dynamic.IsUndefined (a))
				return false; // any comparision with undefined results in false

			if (a == null)
				return b == null ? true : false; // string and null, false; null and null, true

			return String.CompareOrdinal (a.ToString (), b) >= 0;
		}

		public static bool EqualityObjString (object a, string b)
		{
			if (IsNumeric (a) || a is bool) {
				if (a is int)
					return EqualityIntObj ((int)a, b);
				else if (a is uint)
					return EqualityUIntObj ((uint)a, b);
				return EqualityDoubleObj (Convert.ToDouble (a), b);
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (a is string)
				return String.CompareOrdinal ((string)a, b) == 0;

			if (Dynamic.IsNullOrUndefined (a))
				return Dynamic.IsNullOrUndefined (b);

			return false;
		}

		public static bool EqualityStringObj (string a, object b)
		{
			if (IsNumeric (b) || b is bool) {
				if (b is int)
					return EqualityObjInt (a, (int)b);
				else if (b is uint)
					return EqualityObjUInt (a, (uint)b);
				return EqualityObjDouble (a, Convert.ToDouble (b));
			}

			Stats.Increment (StatsCounter.BinaryOperationBinderInvoked);

			if (b is string)
				return String.CompareOrdinal (a, (string)b) == 0;

			if (Dynamic.IsNullOrUndefined (b))
				return Dynamic.IsNullOrUndefined (a);

			return false;
		}

		private static bool IsNumeric (object a)
		{
			if (a == null)
				return false;

			switch (Type.GetTypeCode (a.GetType ())) {
			case TypeCode.Byte:
			case TypeCode.SByte:
			case TypeCode.UInt16:
			case TypeCode.UInt32:
			case TypeCode.UInt64:
			case TypeCode.Int16:
			case TypeCode.Int32:
			case TypeCode.Int64:
			case TypeCode.Decimal:
			case TypeCode.Double:
			case TypeCode.Single:
				return true;
			default:
				return false;
			}
		}
	}
}

#endif
