// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {
	import System.*;
	import System.Text.RegularExpressions.*;

	public class RegExp {
	
		//
		// Properties
		//
		
		public property dotall : Boolean { 
			get { return (mRegex.Options & RegexOptions.Singleline) != 0; }
 	 	}
 	 	public property extended : Boolean { 
 	 		get { return mExtended;} 
 	 	}
 	 	public property global : Boolean { 
 	 		get { return mGlobal;} 
 	 	}
 	 	public property ignoreCase : Boolean { 
 	 		get { return (mRegex.Options & RegexOptions.IgnoreCase) != 0; }
 	 	}
 	 	public property lastIndex : Number { 
			get { return mLastIndex; } 
 	 	}
 	 	public property multiline : Boolean { 
 	 		get { return (mRegex.Options & RegexOptions.Multiline) != 0; }
 	 	}
 	 	
 	 	public property source : String { 
 	 		get { return mSource;} 
 	 	}

 	 	//
 	 	// Methods
 	 	//
 	 	 	 	
		public function RegExp(re:String, flags:String = null) {
			var options:RegexOptions = RegexOptions.None;
			for (var i:int=0; i < flags.length; i++) {
				switch (flags.charAt(i)) {
				case "m":
					options |= RegexOptions.Multiline;
					break;
				case "i":
					options |= RegexOptions.IgnoreCase;
					break;
				case "g":
					mGlobal = true;
					break;
				case "x":
					mExtended = true;
					break;
				case "s":
					options |= RegexOptions.Singleline;
					break;
				default:
					throw new NotImplementedException();
				}
			}

			// In extended mode, unescaped whitespace characters are removed.
			if (mExtended) {
				re = Regex.Replace(re, "((?<!\\\\))\\s+", "$1");
			}

			mSource = re;
			mRegex = new Regex(re, options);
			mLastIndex = 0;
		}

		public function exec(str:String):Object {
			var m = mRegex.Match(str, mLastIndex);
			if (m.Success) {
				if (mGlobal) {
					mLastIndex = m.Index + m.Value.Length;
				}
				var a:Array = [];
				a["index"] = m.Index;
				a["input"] = str;
				for each (var g:Group in m.Groups) {
					a.push(g.Value);
				}
				return a;
			}
			return null;
		}
 	 	
		public function test(str:String):Boolean {
			var m = mRegex.Match(str, mLastIndex);
			if (m.Success) {
				if (mGlobal) {
					mLastIndex = m.Index + m.Value.Length;
				}
				return true;
			}
			return false;
		}
		
		public function replace(str:String, replaceWith:String):String {
			return mRegex.Replace(str, replaceWith);
		}
		
		public function search(str:String):int {
			var m = mRegex.Match(str);
			if (!m.Success) {
				return -1;
			}
			return m.Index;
		}
		
		public function match(str:String):Array {
			var a:Array = null;
			var m = mRegex.Match(str);
			while (m.Success) {
				if (a == null) a = new Array();
				a.push( m.Value );
				m = m.NextMatch();
			}
			return a;
		}
		
		public function split(str:String):Array {
			var a:Array = new Array();

			var lastIndex:int = 0;

			var m = mRegex.Match(str);
			while (m.Success) {
			
				// get everything before the match
				var before:String = str.Substring(lastIndex, m.Index - lastIndex);
				
				a.push(before);
				
				// push all matching groups
				for (var i:int = 1; i < m.Groups.Count; i++)
				{
					a.push(m.Groups[i].Value);
				}
				
				// set last index
				lastIndex = m.Index + m.Length;
				
				// next match
				m = m.NextMatch();
			}

			// push everything after last match
			var end:String = str.Substring(lastIndex, str.Length - lastIndex);
			a.push(end);
								
			return a;
		}
		
		var mRegex:Regex;
		var mSource:String;
		var mGlobal:Boolean;
		var mExtended:Boolean;
		var mLastIndex:Number;
	}

}
