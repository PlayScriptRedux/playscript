// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {
	
	public class Date {
		
		//
		// Properties
		//

		public function Date(a:Object = null)
		{
			if (a is int) {
				mDate = new System.DateTime(int(a));
			} else if (a is Number)
			{
				setTime(a as Number);
			} else if (a != null) {
				throw new System.NotImplementedException(); 
			} else
			{
				mDate = System.DateTime.Now;
			}
		}

		private static var mTickFactor:long = 10 * 1000;
		private static var mEpoch:System.DateTime = new System.DateTime(1970,1,1,0,0,0);

		public function get time():Number { return getTime();  }
		public function get date():Number { throw new System.NotImplementedException();  }
		public function get fullYear():Number { throw new System.NotImplementedException();  }
		public function get month():Number { throw new System.NotImplementedException();  }
		public function get day():Number { throw new System.NotImplementedException();  }
		public function get dayUTC(): Number { 
			return mDate.ToUniversalTime().DayOfWeek as Number;
		}
		public function get hours():Number { throw new System.NotImplementedException();  }
		public function get hoursUTC():Number { 
			return mDate.ToUniversalTime().Hour as Number;
		}
		public function get minutes():Number { throw new System.NotImplementedException();  }
		public function get seconds():Number { throw new System.NotImplementedException();  }

		public function setTime(t:Number) : void 
		{ 
			var nanoTicks:long = long(t) * mTickFactor;
			mDate = new System.DateTime(nanoTicks + mEpoch.Ticks);  
		}
		public function setDate(t:Number) : void { throw new System.NotImplementedException();  }
		public function setHours(t:Number) : void { throw new System.NotImplementedException();  }
		public function setMinutes(t:Number) : void { throw new System.NotImplementedException();  }
		public function setSeconds(t:Number) : void { throw new System.NotImplementedException();  }
		public function getTime() : Number 
		{ 
			var nanoTicks:long = (mDate.Ticks - mEpoch.Ticks);
			return long(nanoTicks / mTickFactor);  // to milliseconds
		}
		public function getDate() : Number { throw new System.NotImplementedException();  }
		public function getYear() : Number { throw new System.NotImplementedException();  }
		public function getFullYear() : Number { throw new System.NotImplementedException();  }
		public function getMonth() : Number { throw new System.NotImplementedException();  }
		public function getDay() : Number { throw new System.NotImplementedException();  }
		public function getHours() : Number { return mDate.Hour;  }
		public function getMinutes() : Number { return mDate.Minute;  }
		public function getSeconds() : Number { return mDate.Second;  }
		public override function valueOf() : Object { 
			return Math.floor(getTime() / 1000.0);
		}

		public static function UTC(a:Number, b:Number, c:Number) : Number { throw new System.NotImplementedException();  }

		private var mDate:System.DateTime;
	}
	
}
