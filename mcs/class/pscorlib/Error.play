// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

import System.Diagnostics.StackTrace;

package {
	public partial class Error extends System.Exception
	{
		//
		// Internal
		//
		private var _errorID : int;
		private var _name : String;
		private var _message : String;
		private var _stackTrace : StackTrace;

		//
		// Properties
		//

		public property errorID : int { get { return _errorID; } } 

		public property message : String
		{
			get
			{
				if (_message)
				{
					return _message;
				}
				return this.Message;
			}
			set
			{
				_message = value;
			}
		}

		public property name : String
		{
			get
			{
				if (_name)
				{
					return _name;
				}
				return GetType().Name;
			}
			set
			{
				_name = value;
			}
		}

		//
		// Methods
		//
		public function Error(ex:System.Exception) {
			super(ex.Message, ex);
			HResult = ex.HResult;
			_stackTrace = new System.Diagnostics.StackTrace(ex, true);
		}

		public function Error(message:String = "", id:int = 0) {
			super(message);
			_stackTrace = new System.Diagnostics.StackTrace(this, true);
			_errorID = id;
		}

		public function getStackTrace():String {
			var max:int = _stackTrace.FrameCount;
			var result:String = "TypeError: Error #" + HResult.ToString() + ": " + Message + "\n";
			for (var i:int = 0 ; i < max ; ++i) {
				var sf:System.Diagnostics.StackFrame = _stackTrace.GetFrame(i);
				var funcNameSpace:String = sf.GetMethod().DeclaringType.Namespace;
				var funcClassName:String = sf.GetMethod().DeclaringType.Name;
				var funcName:String = sf.GetMethod().Name;
				var file:String = sf.GetFileName();
				var line:int = sf.GetFileLineNumber();
				result += "at " + funcNameSpace + "::" + funcClassName + "/" + funcName + "()[" + file + ":" + line.ToString() + "]\n";
			}

			return result;
		}

		public function toString():String {
			return this.ToString();
		}

		public static implicit operator Error(s:String)
		{
			return new Error(s);
		}
	}
}

