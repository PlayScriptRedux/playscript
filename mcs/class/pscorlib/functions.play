// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {

	public function isA(obj:*, cl:Class):Boolean {
		throw new System.NotImplementedException();	
	}

	public function decodeURI(uri:String):String {
		throw new System.NotImplementedException();	
	}
 	 	
	public function decodeURIComponent(uri:String):String {
		return System.Uri.UnescapeDataString(uri);	
	}
 	 	
	public function encodeURI(uri:String):String {
		throw new System.NotImplementedException();	
	}
 	 	
	public function encodeURIComponent(uri:String):String {
		throw new System.NotImplementedException();	
	}
 	 	
	public function escape(str:String):String {
		throw new System.NotImplementedException();	
	}
 	 	
	public function isFinite(num:Number):Boolean {
		throw new System.NotImplementedException();	
	}
 	 	
	public function isNaN(num:Number):Boolean {
		return System.Double.IsNaN(num);
	}
	 	 	
	public function isXMLName(str:String):Boolean {
		throw new System.NotImplementedException();	
	}
 	 	
	public function parseFloat(str:String):Number {
		if (str == "undefined") return System.Double.NaN;

		if (!System.String.IsNullOrEmpty(str))
		{
			return System.Double.Parse(str);
		} else {
			return System.Double.NaN;
		}
	}

	// need to create this temporary class to hold static variables
	public class TraceConfig
	{
		public static var enable:Boolean = true;
	}

	public static function trace(o:System.Object):void {
		if (!TraceConfig.enable) return;
		var str = (o!=null) ? o.ToString() : "";
		System.Console.WriteLine(str);
		Telemetry.Session.WriteTrace(str);
	}
		
	public static function trace(o1:System.Object, o2:System.Object):void {
		if (!TraceConfig.enable) return;
		var str = System.String.Format("{0} {1}", o1, o2);
		System.Console.WriteLine(str);
		Telemetry.Session.WriteTrace(str);
	}

	public static function trace(o1:System.Object, o2:System.Object, o3:System.Object):void {
		if (!TraceConfig.enable) return;
		var str = System.String.Format("{0} {1} {2}", o1, o2, o3);
		System.Console.WriteLine(str);
		Telemetry.Session.WriteTrace(str);
	}

	public static function trace(o1:System.Object, o2:System.Object, o3:System.Object, ...args):void {
		if (!TraceConfig.enable) return;
		var sb = new System.Text.StringBuilder();
		sb.AppendFormat("{0} {1} {2}", o1, o2, o3);
		for each (var o:System.Object in args) {
			sb.AppendFormat(" {0}", o);
		}
		var str = sb.ToString();
		System.Console.WriteLine(str);
		Telemetry.Session.WriteTrace(str);
	}
 	 	
	public function parseInt(str:String, radix:uint):int {
		if (radix != 0 && radix != 10) 
			throw new System.NotImplementedException();

		if (str == null || str == "") return 0;

		if (str.StartsWith("0x", System.StringComparison.Ordinal)) {
			// parse hex
			return System.Convert.ToInt32(str.Substring(2), 16);
		} else {
			if (!str.Contains('.')) {
				return System.Convert.ToInt32(str);
			} else {
				return int(System.Convert.ToDouble(str));
			}
		}
	}

	public function parseInt(str:String):int {
		return parseInt(str, 10);
	}


	public function unescape(str:String):String {
		throw new System.NotImplementedException();
	}

	public function objectIsClass(o:Object, type:Class):Boolean {
		return PlayScript.Dynamic.ObjectIsClass(o,type);
	}
	
	public function invokeStaticMethod(type:Class, methodName:String, args:Array):Object
	{
		// pass this off to C# code
		return PlayScript.Dynamic.InvokeStaticMethod(type, methodName, args);
	}

	public function getStaticProperty(type:Class, propertyName:String):Object
	{
		// pass this off to C# code
		var v:System.Object;
		if (PlayScript.Dynamic.GetStaticMember(type, propertyName, out v)) {
			return v;
		} else {
			return null;
		}
	}

	public function setStaticProperty(type:Class, propertyName:String, v:Object):void
	{
		// pass this off to C# code
		if (!PlayScript.Dynamic.SetStaticMember(type, propertyName, v)) {
			throw new Error("Could not find static property: " + propertyName);
		}
	}

}
