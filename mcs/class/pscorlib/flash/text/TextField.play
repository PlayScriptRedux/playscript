// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.text {

	import System.*;
	import flash.display.InteractiveObject;
	import flash.geom.Rectangle;
	import flash.display.DisplayObject;

	
#if PLATFORM_MONOMAC
	import MonoMac.CoreGraphics.*;
	import MonoMac.Foundation.*;
	import MonoMac.AppKit.*;
#elif PLATFORM_MONOTOUCH
	import MonoTouch.Foundation.*;
	import MonoTouch.CoreGraphics.*;
	import MonoTouch.UIKit.*;
#elif PLATFORM_MONODROID
	import Android.Graphics.Paint;
	import Android.Graphics.PaintFlags;
	import Android.Graphics.Typeface;
	import Android.Graphics.TypefaceStyle;
	import Android.Graphics.Rect;
	import Android.Graphics.Color;
#endif

	public class TextFieldType {
		public const DYNAMIC : String = "dynamic";
		public const INPUT : String = "input";
	}

	public class TextField extends InteractiveObject {
	
		//
		// Properties
		//
	
		public property alwaysShowSelection : Boolean { get; set; }

 	 	public property antiAliasType : String { get; set; }

 	 	public property autoSize : String { get; set; }

 	 	public property background : Boolean { get; set; }

 	 	public property backgroundColor : uint { get; set; }

 	 	public property border : Boolean { get; set; }

 	 	public property borderColor : uint { get; set; }

 	 	public property bottomScrollV : int { get { throw new System.NotImplementedException(); } }

		public property caretIndex : int { get { throw new System.NotImplementedException(); } }

 	 	public property condenseWhite : Boolean { get; set; }

 	 	public property defaultTextFormat : TextFormat { 
			get {
				if (mTextFormat == null) {
					mTextFormat = new TextFormat();
					mDirty = true;
				}
				return mTextFormat;
			}
			set {
				mTextFormat = value;
				mDirty = true;
			}
		}

 	 	public property displayAsPassword : Boolean { get; set; }

 	 	public property embedFonts : Boolean { get; set; }

 	 	public property gridFitType : String { get; set; }

 	 	public property htmlText : String { get; set; }

		public property length : int { get { return this.text.Length; } }

 	 	public property maxChars : int { get; set; }

		public property maxScrollH : int { get { throw new System.NotImplementedException(); } }

		public property maxScrollV : int { get { throw new System.NotImplementedException(); } }

 	 	public property mouseWheelEnabled : Boolean { get; set; }

 	 	public property multiline : Boolean { get; set; }

		public property numLines : int { get { throw new System.NotImplementedException(); } }

 	 	public property restrict : String { get; set; }

 	 	public property scrollH : int { get; set; }

 	 	public property scrollV : int { get; set; }

 	 	public property selectable : Boolean { get; set; }

		public property selectionBeginIndex : int { get { throw new System.NotImplementedException(); } }

		public property selectionEndIndex : int { get { throw new System.NotImplementedException(); } }

 	 	public property sharpness : Number { get; set; }

 	 	public property styleSheet : StyleSheet { get; set; }

 	 	public property text : String 
		{ 
			get { return mText; } 
			set
			{
				if (mText != value)
				{
					mText = value;
					// set dirty flag so bounds can be recomputed
					mDirty = true;
				}
			}
		}

		public property selectedText : String
		{
			get { return ""; }
		}

 	 	public property textColor : uint { get; set; }

		public property textHeight : Number 
		{
			get 
			{ 
				UpdateBounds();
				return mTextHeight;
			} 
		}

		public property textInteractionMode : String { get { throw new System.NotImplementedException(); } }

		public property textWidth : Number 
		{ 
			get 
			{ 
				UpdateBounds();
				return mTextWidth;
			} 
		}

 	 	public property thickness : Number { get; set; }

 	 	public property type : String { get; set; }

 	 	public property useRichTextClipboard : Boolean { get; set; }

 	 	public property wordWrap : Boolean { get; set; }

		//
		// Methods
		//
		
		public function TextField() {
			this.text = "";
		}
 	 	
		public function appendText(newText:String):void {
			this.text = this.text + newText;
			//throw new NotImplementedException();
		}

		public function getCharBoundaries(charIndex:int):Rectangle {
			throw new NotImplementedException();
		}

		public function getCharIndexAtPoint(x:Number, y:Number):int {
			throw new NotImplementedException();
		}		

		public function getFirstCharInParagraph(charIndex:int):int {
			throw new NotImplementedException();
		}

 	 	public function getImageReference(id:String):DisplayObject {
			throw new NotImplementedException();
		}

		public function getLineIndexAtPoint(x:Number, y:Number):int {
			throw new NotImplementedException();
		}

		public function getLineIndexOfChar(charIndex:int):int {
			throw new NotImplementedException();
		}

		public function getLineLength(lineIndex:int):int {
			throw new NotImplementedException();
		}

		public function getLineMetrics(lineIndex:int):TextLineMetrics {
			throw new NotImplementedException();
		}

		public function getLineOffset(lineIndex:int):int {
			throw new NotImplementedException();
		}

		public function getLineText(lineIndex:int):String {
			throw new NotImplementedException();
		}

		public function getParagraphLength(charIndex:int):int {
			throw new NotImplementedException();
		}

		public function getTextFormat(beginIndex:int = -1, endIndex:int = -1):TextFormat {
			throw new NotImplementedException();
		}

		public static function isFontCompatible(fontName:String, fontStyle:String):Boolean {
			throw new NotImplementedException();
		}

		public function replaceSelectedText(value:String):void {
			throw new NotImplementedException();
		}

		public function replaceText(beginIndex:int, endIndex:int, newText:String):void {
			throw new NotImplementedException();
		}

		public function setSelection(beginIndex:int, endIndex:int):void {
			throw new NotImplementedException();
		}

		public function setTextFormat(format:TextFormat, beginIndex:int = -1, endIndex:int = -1):void {
			trace("warning: not implemented setTextFormat");
		}

		private function UpdateBounds():void
		{
			if (mDirty) 
			{
#if PLATFORM_MONOTOUCH
				var format:flash.text.TextFormat = defaultTextFormat;
				var font:UIFont = UIFont.FromName(format.font, float(Number(format.size)) );
				if (font == null) {
					font = UIFont.FromName("Verdana", float(Number(format.size)) );
				}
				if (font != null)
				{
					var size:System.Drawing.SizeF;
					if (this.multiline) {
						size = (new NSString(text)).StringSize(font, float(width), this.wordWrap ? UILineBreakMode.WordWrap : UILineBreakMode.CharacterWrap); 
					} else {
						size = (new NSString(text)).StringSize(font);
					}
					mTextWidth  = size.Width;
					mTextHeight = size.Height;
				}
				else
				{
					// 
					mTextWidth = mTextHeight = 0.0;
				}
#elif PLATFORM_MONODROID
				var format:flash.text.TextFormat = defaultTextFormat;

				var typeface:Typeface = Typeface.Create(format.font, TypefaceStyle.Normal);

				if (typeface != null)
				{
					// $$TODO handle wordwrap and single line
					if (!wordWrap || !multiline) 
						throw new System.NotImplementedException();

					var paint:Paint = new Paint(PaintFlags.AntiAlias);
					paint.Color = Color.Black;
					paint.TextSize = float(Number(format.size));
					paint.SetTypeface( typeface );

					var bounds:Rect = new Rect();
					paint.GetTextBounds(text, 0, 1, bounds);

					mTextWidth  = bounds.Width();
					mTextHeight = bounds.Height();
				}
				else
				{
					// 
					mTextWidth = mTextHeight = 0.0;
				}
#else
				// $$TODO
				mTextWidth  = text.Length * 8.0;
				mTextHeight = 8.0;
#endif
				mDirty = false;
			}
		}

		public function getRawText():String {
			return mText;
		}

		private var mDirty:Boolean = true;
		private var mText:String;
		private var mTextWidth:Number;
		private var mTextHeight:Number;
		private var mTextFormat:TextFormat;
	
	}

}
