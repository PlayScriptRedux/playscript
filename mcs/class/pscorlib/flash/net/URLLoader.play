// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.net {

	import System.IO.*;
	import flash.events.EventDispatcher;
	import flash.events.Event;
	import flash.events.TimerEvent;
	import flash.events.IOErrorEvent;
	import flash.utils.*;
	import System.Net.*;

#if PLATFORM_MONODROID
	import Android.App.*;
	import Android.Content.*;
#endif

	public class URLLoader extends EventDispatcher {

		//
		// Properties
		//
			
		public property bytesLoaded : uint { get; set; }

	 	public property bytesTotal : uint { get; set; }

 	 	public property data : * { get; set; }

 	 	public property dataFormat : String { get; set; }
 	 	
		//
		// Methods
		//

		public function URLLoader(request:URLRequest = null) {
			dataFormat = URLLoaderDataFormat.TEXT;
			mRequest = request;
		}
 	 	
		public function close():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function load(request:URLRequest, synchronous:Boolean = false):void {
			mRequest = request;

			// get next request id for this load
			mId = sNextRequestId++;

			// send data to telemetry
			Telemetry.Session.WriteTime(".network.request.time");
			sTelemetryRequestUrl.WriteValue(request.url);
			sTelemetryRequestId.WriteValue(mId);

			var url:String = request.url.ToLowerInvariant();
			if (url.StartsWith("http:") || url.StartsWith("https:")) {
				// handle a http load
				// load with a delay

				if (PlayScript.Player.Offline) {
					// load from offline cache
					if (synchronous) {
						doLoadFromOfflineCache();
					} else {
						// this must be done on the 'next' frame
						enqueueAction(doLoadFromOfflineCache);
					}
				} else 
				{
					if (synchronous) {
						doHttpLoadSynchronous();
					} else {
						doHttpLoadAsynchronous();
					}
				}

			} else {
				if (synchronous) {
					doLocalLoad();
				} else {
					// load with a delay
					enqueueAction(doLocalLoad);
				}
			}
		}

		// Temporary hack
		// TODO: Find a better place for this

		private function doHttpLoadSynchronous():void {
			var request:WebRequest = sendRequest();
			if (request) {
				var response = HttpWebResponse(request.GetResponse());
				responseAction(response);

				// Dispatch complete event at the end of the synchronous load
				dispatchCompleteEvent();
			}
		}

		private function doHttpLoadAsynchronous():void {
			// Note that data might not be sent asynchronously...
			var request:WebRequest = sendRequest();
			if (request) {
				// We are going to wait the response in another thread
				// And the complete event will be added in a delayed timer, so the event is dispatched in the main thread
				DoWithResponse(request, responseActionWithDelayedEvent);
			}
		}

		private function doLoadFromOfflineCache():void {
			var hash:String = mRequest.getHash();
			var span = Telemetry.Session.BeginSpan();

			switch (dataFormat) 
			{
			case URLLoaderDataFormat.BINARY: 
				var cachedBinaryResponse:ByteArray = PlayScript.Player.LoadBinaryWebResponseFromCache(hash);
				if (cachedBinaryResponse != null) 
				{
					trace("URLLoader: http cached binary ", mRequest.url);
					
					this.bytesLoaded = cachedBinaryResponse.length;
					this.bytesTotal  = cachedBinaryResponse.length;
					this.data = cachedBinaryResponse;
					dispatchCompleteEvent();
					Telemetry.Session.EndSpanValue(".network.loadfile", span, mRequest.url);
					return;
				} 
				break;
			case URLLoaderDataFormat.TEXT: 
				var cachedTextResponse:String = PlayScript.Player.LoadTextWebResponseFromCache(hash);
				if (cachedTextResponse != null) 
				{
					trace("URLLoader: http cached text ", mRequest.url);
					
					this.bytesLoaded = cachedTextResponse.Length;
					this.bytesTotal  = cachedTextResponse.Length;
					this.data = cachedTextResponse;
					dispatchCompleteEvent();
					Telemetry.Session.EndSpanValue(".network.loadfile", span, mRequest.url);
					return;
				} 
				break;
			}
				
			// offline and no cached response, return error
			trace("URLLoader: http offline ", mRequest.url);
			dispatchErrorEvent();
		}

		private function sendRequest():WebRequest {
			trace("URLLoader: http load ", mRequest.url);

			var method:String = "GET";
			if (mRequest.method != null) {
				method = mRequest.method;
			}

			var wr:HttpWebRequest;
			var url:String = mRequest.url;
			switch(method) {
				case "GET": {
					// Pass parameters using query parameters
					if (mRequest.data) {
						url += "?" + mRequest.data.toString();
					}
					wr = HttpWebRequest.Create(url) as HttpWebRequest;
					wr.Method = method;
					break;
				}
				default:
					wr = HttpWebRequest.Create(url) as HttpWebRequest;
					wr.Method = method;
					if (mRequest.data) {
						var postData = String(mRequest.data);
						var post = wr.GetRequestStream();
						var writer = new StreamWriter(post);
						writer.Write(postData);
						writer.Close();
					}
					break;
			}

			wr.KeepAlive = mRequest.keepAlive;
			if (mRequest.userAgent != null)
			{
				wr.UserAgent = mRequest.userAgent;
			}
			if (mRequest.contentType != null)
			{
				wr.ContentType = mRequest.contentType;
			}
			else
			{
				wr.ContentType = "application/x-www-form-urlencoded";
			}

			// add a header to let the server know we are a mobile client
			wr.Headers.Add("X-Mobile-Client", "true");

			wr.Credentials = CredentialCache.DefaultCredentials;
			return wr;
		}

		private function responseAction(response:HttpWebResponse):void {
			var hash:String = mRequest.getHash();

			if (response.StatusCode != HttpStatusCode.OK) {
				// Display the status.
				trace("URLLoader: http load ", response.StatusDescription, mRequest.url);
			}

			// Get the stream containing content returned by the server.
			var dataStream = response.GetResponseStream ();

			// read response into byte array
			var ba:ByteArray = new ByteArray();
			ba.setCapacity(response.ContentLength);
			ba.readFromStream(dataStream);
			ba.position = 0;
			this.bytesLoaded = ba.length;
			this.bytesTotal  = ba.length;

			switch (dataFormat) {
				case URLLoaderDataFormat.BINARY: {
						this.data = ba;
						PlayScript.Player.StoreBinaryWebResponseIntoCache(hash, ba);
						break;
					}
				case URLLoaderDataFormat.TEXT: {
						// convert to string
						var text = ba.toString();
						this.data = text;
						PlayScript.Player.StoreTextWebResponseIntoCache(hash, text);
						break;
					}
				default:
					throw new System.NotImplementedException();
			}

			// Cleanup the streams and the response.
			dataStream.Close ();
			response.Close ();
			trace("URLLoader: http load complete length:", this.bytesLoaded, mRequest.url);
		}

		private function responseActionWithDelayedEvent(response:HttpWebResponse):void {
			responseAction(response);
			// By delaying the complete event, we make sure it is going to be dispatched in the main thread
			enqueueAction(dispatchCompleteEvent);
		}

		private function dispatchCompleteEvent():void {
			// TODO:addEventListener Find a way to make sure this event is dispatched in the main thread
			var de:Event = new Event(Event.COMPLETE);
			this.dispatchEvent(de);
		}

		private function dispatchErrorEvent():void {
			var derror:Event = new IOErrorEvent(IOErrorEvent.IO_ERROR, false, false, "offline");
			this.dispatchEvent(derror);
		}

		private function doLocalLoad():void {
			trace("URLLoader: local load ", mRequest.url);

			var span = Telemetry.Session.BeginSpan();

			// handle file loading
			var path:String = PlayScript.Player.TryResolveResourcePath(mRequest.url);
			if (path == null)
			{
				trace("URLLoader: could not load ", mRequest.url);
				// io error, file not found
				this.dispatchEvent(new IOErrorEvent(IOErrorEvent.IO_ERROR));
				return;
			}

#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
			// file exists. read it
			var fileData:byte[] = File.ReadAllBytes(path);
#elif PLATFORM_MONODROID 

			var dest:MemoryStream = new MemoryStream();
			var src:Stream;

			try
			{
				src = Application.Context.Assets.Open(path);
			}
			// if cannot load as assets, try loading it as plain file
			// disable the ex defined but not used "warning as error"
			#pragma warning disable 0168
			catch (ex:Java.IO.FileNotFoundException)
			#pragma warning restore 0168
			{
				src = File.OpenRead(path);
			}

			src.CopyTo(dest);
			var fileData:byte[] = dest.ToArray();

#else
			var fileData:byte[] = new byte[0];
#endif

			switch (dataFormat)
			{
			case URLLoaderDataFormat.BINARY: {
				var ba:ByteArray = ByteArray.fromArray(fileData);
				this.data = ba;
				break;
			}
			case URLLoaderDataFormat.TEXT: {
				var text:String =  System.Text.Encoding.UTF8.GetString(fileData);
				this.data = text;
				break;
			}
			default:
				throw new System.NotImplementedException();
			}

			// update bytes loaded
			this.bytesLoaded = fileData.Length;
			this.bytesTotal  = fileData.Length;

			// dispatch complete event
			var de:Event = new Event(Event.COMPLETE);
			this.dispatchEvent(de);
			Telemetry.Session.EndSpanValue(".network.loadfile", span, mRequest.url);
		}


		// enqueues a loader action to be executed on the next frame
		// this function is thread safe
		public static function enqueueAction(action:System.Action):void {
			if (action == null) return;

			System.Threading.Monitor.Enter(sQueue);
			try
			{
				sQueue.push(action);
			}
			finally
			{
				System.Threading.Monitor.Exit(sQueue);
			}
		}


		// dequeues a loader action
		// this function is thread safe
		public static function dequeueAction():System.Action {
			System.Threading.Monitor.Enter(sQueue);
			try
			{
				if (sQueue.length > 0) {
					return sQueue.shift();
				} else {
					return null;
				}
			}
			finally
			{
				System.Threading.Monitor.Exit(sQueue);
			}
		}

		// this processes all items in the loader queue
		// it will execute up until the max time in milliseconds provided
		// this is called by the Player once per frame
		public static function processQueue(maxTimeMs:Number):void {
			var sw:System.Diagnostics.Stopwatch = System.Diagnostics.Stopwatch.StartNew();

			for (;;)
			{
				// dequeue action
				var action:System.Action = dequeueAction();
				if (action == null)
					return;

				// invoke action
				action();
				
				// abort loop if time has exceeded
				if (sw.ElapsedMilliseconds > maxTimeMs)
					return;
			}
		}

		// request for this loader
		private var mRequest:URLRequest;
		// unique request id
		private var mId:int;

		// url loader queue (to be processed each frame)
		private static var sQueue:Vector.<System.Action> = new Vector.<System.Action>();
		private static var sNextRequestId:int = 1;
		private static var sTelemetryRequestUrl:Telemetry.Value = new Telemetry.Value(".network.requesturl");
		private static var sTelemetryRequestId:Telemetry.Value = new Telemetry.Value(".network.request.id");
	}

}
