// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.net {

	public class URLRequest {

		public static var GenerateStringForCacheHashFunc:System.Func.<URLRequest, String>;

		//
		// Properties
		//
	
		public property authenticate : Boolean { get; set; }

 	 	public property cacheResponse : Boolean { get; set; }

 	 	public property contentType : String { get; set; }

 	 	public property data : Object { get; set; }

 	 	public property digest : String { get; set; }

 	 	public property followRedirects : Boolean { get; set; }

 	 	public property idleTimeout : Number { get; set; }

 	 	public property manageCookies : Boolean { get; set; }

 	 	public property method : String { get; set; }

 	 	public property requestHeaders : Array { get; set; }

 	 	public property url : String { get; set; }

 	 	public property useCache : Boolean { get; set; }

 	 	public property userAgent : String { get; set; }

		// Not part of the official Flash API, but convenient to have
		public property keepAlive : Boolean { get; set; }

		//
		// Methods 
		//
		
		public function URLRequest(url:String = null) {
			this.url = url;
		}

		private function generateHash():String {

			var str:String;
			if (GenerateStringForCacheHashFunc != null) {
				str = GenerateStringForCacheHashFunc(this);
			} else {
				str = method + "_" + url;
				if (data is String) {
					str += data;
				}
			}

			var filename:String = System.IO.Path.GetFileNameWithoutExtension(this.url);
			var extension:String = System.IO.Path.GetExtension(this.url);
			return filename + "_" + PlayScript.Player.CalculateMD5Hash(str) + extension;
		}

		internal function getHash():String {
			// cache hash here locally
			if (mHash == null) {
				mHash = generateHash();
			}
			return mHash;
		}

		private var mHash:String;
	
	}

}
