// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.media {

	import flash.events.EventDispatcher;
	import flash.net.URLRequest;
	import flash.utils.ByteArray;

	public class Sound extends EventDispatcher {

		private var _url:String;

		//
		// Properties
		//
		
		public property bytesLoaded : uint { get { /* Not implemented but used */ return 0; } }

		public property bytesTotal : int { get { /* Not implemented but used */ return 0; } }

		public property id3 : ID3Info { get { throw new System.NotImplementedException(); } }

		public property isBuffering : Boolean { get { throw new System.NotImplementedException(); } }

		public property isURLInaccessible : Boolean { get { throw new System.NotImplementedException(); } }

		public property length : Number { get { throw new System.NotImplementedException(); } }

 	 	public property url : String { 
			get { return _url; } 
        }

 	 	//
 	 	// Methods
 	 	//
 	 	 	 	 	 	
		public function Sound(stream:URLRequest = null, context:SoundLoaderContext = null) {
#if PLATFORM_MONOTOUCH
			Init();
#endif
		}

 	 	public function close():void {
 	 	}
 	 	
		public function extract(target:ByteArray, length:Number, startPosition:Number = -1):Number {
			throw new System.NotImplementedException();
			//return 0.0;
		}
 	 	
		public function load(stream:URLRequest, context:SoundLoaderContext = null):void {
			_url = stream.url;
			internalLoad(stream.url);
		}
 	 	
		public function loadCompressedDataFromByteArray(bytes:ByteArray, bytesLength:uint):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function loadPCMFromByteArray(bytes:ByteArray, samples:uint, format:String = "float", stereo:Boolean = true, sampleRate:Number = 44100.0):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function play(startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null):SoundChannel {
			return internalPlay(startTime, loops, sndTransform);		
		}
	
#if PLATFORM_GENERIC

		private function internalLoad(url:String):void {
			trace("Sound internalLoad is not implemented for this platform");
		}

		private function internalPlay(startTime:Number=0, loops:int=0, sndTransform:SoundTransform=null):SoundChannel {
			trace("Sound internalPlay is not implemented for this platform");
			return null;
		}

#endif

	}

}

