// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.filesystem {
	import System.*;
	import System.IO.*;
	import System.Reflection.*;

#if PLATFORM_MONOMAC
	import MonoMac.CoreGraphics.*;
	import MonoMac.Foundation.*;
	import MonoMac.AppKit.*;
#elif PLATFORM_MONOTOUCH
	import MonoTouch.Foundation.*;
#elif PLATFORM_MONODROID
	import Android.App.*;
#endif

	public class File {
	
		private static var sApplicationDirectory:File;
	
 	 	public static property applicationDirectory : File 
 	 	{ 
 	 		get 
 	 		{
 	 			if (sApplicationDirectory == null) {
					// get location of application
#if PLATFORM_MONOMAC
					var appPath = NSBundle.MainBundle.ResourcePath + "/demo/assets";
#elif PLATFORM_MONOTOUCH
					var appPath = NSBundle.MainBundle.ResourcePath + "/demo/assets";
#elif PLATFORM_MONODROID
					var appPath = "";
#else
					var appPath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
#endif
					// create new file 
 	 				sApplicationDirectory = new File(appPath);
 	 			}
 	 			return sApplicationDirectory;
 	 		} 
 	 	}
 	 	
 	 	public property exists : Boolean {
 	 		get {
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
 	 			return System.IO.File.Exists(mPath) || System.IO.Directory.Exists(mPath);
#elif PLATFORM_MONODROID
				return isFileDroid() || isDirectoryDroid() ;
#else
				return false;
#endif
 	 		}
 	 	}

 	 	public property isHidden : Boolean {
 	 		get {return false;}
 	 	}

 	 	public property isFile : Boolean {
			get{
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
				return System.IO.File.Exists(mPath);
#elif PLATFORM_MONODROID
				return isFileDroid();
#else
				return false;
#endif
			}
 	 	}

#if PLATFORM_MONODROID
		private function isFileDroid() : Boolean {
			try
			{
				Application.Context.Assets.Open(mPath);
				return true;
			} catch
			{
				return false;
			}
		}
#endif

 	 	public property isDirectory : Boolean {
 	 		get {
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
				return System.IO.Directory.Exists(mPath);
#elif PLATFORM_MONODROID
				return isDirectoryDroid();
#else
				return false;
#endif
			}
 	 	}

#if PLATFORM_MONODROID
		private function isDirectoryDroid() : Boolean {
			try
			{
				var list:String[] = Application.Context.Assets.List(mPath);
				if ( list.Length == 0 )
				{
					return false;
				}

				return true;
			} catch
			{
				return false;
			}
		}
#endif
 	 	
 	 	public function File(path:String)
 	 	{
 	 		mPath = path;
 	 	}
 	 	
 	 	public function resolvePath(path:String):File {
 	 		return new File(Path.Combine(mPath, path));
 	 	}
 	 	
 	 	public property nativePath : String {
 	 		get {return mPath;}
 	 	}
 
 	 	public property url : String {
 	 		get {
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
				return "file://" + mPath;
#elif PLATFORM_MONODROID
				return mPath;
#else
				return null;
#endif
			}
 	 	}
 	 	
 	 	public property extension : String {
 	 		get 
 	 		{
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
 	 			var ext:String = System.IO.Path.GetExtension(mPath);
 	 			if (ext.StartsWith(".")) {
 	 				return ext.Substring(1);
 	 			} else {
 	 				return ext;
 	 			}
#elif PLATFORM_MONODROID
				var lastDot:int = mPath.LastIndexOf(".");
				return mPath.Substring(lastDot + 1);
#else
				return null;
#endif
 	 		}
 	 	}

 	 	public property name : String {
 	 		get {
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
				return System.IO.Path.GetFileName(mPath);
#elif PLATFORM_MONODROID
				var lastSlash:int = mPath.LastIndexOf("/");
				return mPath.Substring(lastSlash + 1);
#else
				return null;
#endif
			}
 	 	}
 	 	
 	 	public function getDirectoryListing():_root.Array
 	 	{
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
 	 		var a:_root.Array = [];
 	 		for each (var name:String in System.IO.Directory.GetDirectories(mPath))
 	 		{
 	 			a.push(new File(name));
 	 		}
 	 		
 	 		for each (name in System.IO.Directory.GetFiles(mPath))
 	 		{
 	 			a.push(new File(name));
 	 		}
 	 		
 	 		return a;
#elif PLATFORM_MONODROID
			return getDirectoryListingDroid(mPath);
#else
			return null;
#endif
 	 	}
 	 	
#if PLATFORM_MONODROID
		private function getDirectoryListingDroid(path:String):_root.Array
		{
			var a:_root.Array = [];
			var list:String[] = Application.Context.Assets.List(path);

			if (list.Length > 0) 
			{
				for each (var name:String in list)
				{
					a = a.concat(getDirectoryListingDroid(path + "/" + name));
				}
			}
			else
			{
				a.push(new File(path));
			}

			return a;
		}
#endif

 	 	public override function toString():String
 	 	{
 	 		return mPath;
 	 	}

 	 	private var mPath:String;
	}
}
