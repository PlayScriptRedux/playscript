// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.utils {

	import flash.events.*;
	import System.Diagnostics.Stopwatch;
	import System.Collections.Generic.*;
	import System.Linq.*;

	public class Timer extends EventDispatcher {

		private static const MAX_TIMER_DELTA:Number = 1000.0;
	
		//
		// Properties
		//
	
		public property currentCount : int 
		{ 
			get { return mCurrentCount; } 
		}

 	 	public property delay : Number { get; set; }
 	 	public property repeatCount : int { get; set; }
 	 	public property running : Boolean { get { return mRunning; } }

 	 	//
 	 	// Methods
 	 	//
 	 	 	 	 	 	
		public function Timer(delay:Number, repeatCount:int = 0) {
			this.delay = delay;
			this.repeatCount = repeatCount;
			mRunning = false;
			mCurrentCount = 0;
			mCurrentTime = 0;
		}
 
 		public function reset():void {
 			mRunning = false;
 			mCurrentCount = 0;
			mCurrentTime = 0;
 		}
 	 	
		public function start():void {
			if (!mRunning)
			{
				mRunning = true;
				AddToActiveTimerList(this);
			}
		}
 	 	
		public function stop():void {
			mRunning = false;
		}
		
		private function advanceTime(time:Number):void
		{
			if (!mRunning) return;
			
			// advance accumulated time for this timer
			mCurrentTime += time;
			
			// process accumulated time
			while (mRunning && (mCurrentTime >= delay))
			{
				// subtract delay from accumulated time
//				mCurrentTime -= delay;

				// we clear the accumulated time here to prevent buildup of timer events
				mCurrentTime = 0;

				// increment count
				mCurrentCount++;
			
				// see if we are done
				if ((repeatCount > 0) && (mCurrentCount >= repeatCount))
				{
					// stop running
					mRunning = false;
				}


				// dispatch timer event
				var e:Event = new TimerEvent(TimerEvent.TIMER);
				this.dispatchEvent(e);
				
				if (!mRunning)
				{

					// dispatch timer complete event
					var ec:Event = new TimerEvent(TimerEvent.TIMER_COMPLETE);
					this.dispatchEvent(ec);
				}
			}
		}
		
        // advances all active Timer objects by the delta time specified
        // the game can call this directly giving it the delta time passed per frame
		public static function advanceAllTimersWithTimeDelta(deltaTimeMS:Number):void 
		{
			// iterate through all timers and advance their time
			// note that we clone the active timers here to deal with timers that add timers or timers that must be removed
			// (and note that timers can be added from other threads too).
			for each (var timer:Timer in CloneActiveTimers())
			{
				// advance time
				timer.advanceTime(deltaTimeMS);
				if (!timer.running)
				{
					// remove this timer from the active list 
					RemoveFromActiveTimerList(timer);
				}
			}
		}

        // advances all timers using the appropriate delta time since the last time this method was called
        // the game can call this if it doesn't want to specify its own delta time 
        public static function advanceAllTimers():void 
        {
			var deltaTimeMS:Number = sEventTimer.ElapsedMilliseconds;
            sEventTimer.Restart();

			// clamp to maximum timer delta
			if (deltaTimeMS > MAX_TIMER_DELTA) {
				deltaTimeMS = MAX_TIMER_DELTA;
			}

			advanceAllTimersWithTimeDelta(deltaTimeMS);
        }

		public static function delayCall(closure:Function, delay:Number = 0.0):void {
			if (closure != null) {
				var timer:Timer = new Timer(delay, 1);
				timer.addEventListener(TimerEvent.TIMER, function(e:TimerEvent):void {closure();} );
				timer.start();
			}
		}
		
		
		private static function createTimer(closure:Function, delay:Number, arguments:Array, repeat:int):uint {
			// allocate timer id
			var id:int = sNextTimerId++;
			
			// create timer object
			var timer:Timer = new Timer(delay, repeat);
			timer.addEventListener(TimerEvent.TIMER, function(e:TimerEvent):void 
			                       {
										if (arguments.length == 0) {
											closure();
										} else {
											closure.DynamicInvoke(arguments);
										}
									} );
			timer.start();
			
			// add to dictionary
			sTimerDictionary[id] = timer;
			return id;
		}
		
		private static function deleteTimer(id:uint):void {
			var timer:Timer;
			if (sTimerDictionary.TryGetValue(id, out timer)) {
				timer.stop();
				sTimerDictionary.Remove(id);
			}
		}
		
		internal static function setInterval(closure:Function, delay:Number, arguments:Array):uint {
			return createTimer(closure, delay, arguments, 0);
		}
	
		internal static function setTimeout(closure:Function, delay:Number, arguments:Array):uint {
			return createTimer(closure, delay, arguments, 1);
		}
		
		internal static function clearInterval(id:uint):void {
			deleteTimer(id);
		}
		
		internal static function clearTimeout(id:uint):void {
			deleteTimer(id);
		}
		
		internal static function getTimer():int {
			return sUtilsTimer.ElapsedMilliseconds;
		}
		
		private var mRunning:Boolean;
		private var mCurrentCount:int;
		private var mCurrentTime:Number;
				
		// stopwatch for use by flash.utils.getTimer()
		private static var sUtilsTimer : Stopwatch = Stopwatch.StartNew();
        
        // stopwatch for advancing all timer events
        private static var sEventTimer : Stopwatch = Stopwatch.StartNew();
		
		// this is a dictionary of timers by id for use by setInterval/setTimeout
		private static var sTimerDictionary:Dictionary.<int,Timer> = new Dictionary.<int,Timer>();
		private static var sNextTimerId:int = 1;
	}

}
