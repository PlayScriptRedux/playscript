// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.display {

	import flash.events.EventDispatcher;
	import flash.geom.Rectangle;
	import flash.text.TextSnapshot;
	import flash.events.Event;
	import flash.media.StageVideo;

	public class StageDisplayState
	{
		public const NORMAL:String = "normal";
		public const FULL_SCREEN:String = "fullScreen";
		public const FULL_SCREEN_INTERACTIVE:String = "fullScreenInteractive";
	}

	public class Stage extends DisplayObjectContainer {
	
		//
		// Properties
		//
	
 		public property align : String { get; set; }

 	 	public property allowsFullScreen : Boolean { get { return false; } }

 	 	public property allowsFullScreenInteractive : Boolean { get { return false; } }

 	 	public property autoOrients : Boolean { get; set; }

 	 	public property color : uint { get; set; }

 	 	public property colorCorrection : String { get; set; }

 	 	public property colorCorrectionSupport : String { get { return null; } }

 	 	public property deviceOrientation : String { get { return null; } }
 	 	
 	 	public property displayState : String { get; set; }

 	 	public property focus : InteractiveObject { get; set; }

 	 	public property frameRate : Number { get; set; }

 	 	public property fullScreenHeight : uint { get; private set; }

 	 	public property fullScreenSourceRect : Rectangle { get; private set; }
		
		public property fullScreenWidth : uint { get; private set; }

 	 	public override property mouseChildren : Boolean { get { return false; } set { } }

 	 	public property nativeWindow : NativeWindow { get { return null; } }

 	 	public override property numChildren : int { get { return 0; } }

 	 	public property orientation : String { get { return null; } }

 	 	public property quality : String { get; set; }

 	 	public property scaleMode : String { get; set; }

 	 	public property showDefaultContextMenu : Boolean { get; set; }

 	 	public property softKeyboardRect : Rectangle { get { return null; } }

		public property stage3Ds : Vector.<Stage3D> { get { return mStage3Ds; } }

 	 	public property stageFocusRect : Boolean { get; set; }

 	 	public property stageHeight : int { get; private set;}

 	 	public property stageVideos : Vector.<StageVideo> { get { return null; } }

 	 	public property stageWidth : int { get; private set; }

 	 	public property supportedOrientations : Vector.<String> { get { return null; } }

 	 	public static property supportsOrientationChange : Boolean { get { return false; } }

 	 	public override property tabChildren : Boolean { get; set; }

 	 	public override property textSnapshot : TextSnapshot { get { return null; } }

 	 	public property wmodeGPU : Boolean { get { return false; } }

		public property mouseLock :Boolean {get {return false;} }

		//
		// Methods
		// 
		
		public function Stage(width:int, height:int) {
			mStage = this;
			this.width = width;
			this.height = height;
			this.stageWidth = width;
			this.stageHeight = height;
			this.fullScreenWidth = uint(width); 
			this.fullScreenHeight = uint(height);
			this.frameRate = 60;

			// update capabilities
			flash.system.Capabilities.screenResolutionX = width;
			flash.system.Capabilities.screenResolutionY = height;
	
			var stage3D = new Stage3D(); 
			mStage3Ds.push( stage3D );
		}

		public function onResize(width:int, height:int):void {
			// handle resize if width or height change
			if (width != this.width || height != this.height)  {
				this.width = width;
				this.height = height;
				this.stageWidth = width;
				this.stageHeight = height;
				this.fullScreenWidth = uint(width); 
				this.fullScreenHeight = uint(height);

				// update capabilities
				flash.system.Capabilities.screenResolutionX = width;
				flash.system.Capabilities.screenResolutionY = height;

				// dispatch resize event here...
				var ev:flash.events.Event = new flash.events.Event(flash.events.Event.RESIZE);
				this.dispatchEvent(ev);

				Telemetry.Session.OnResize(width, height);
			}
		}
		
		public function onEnterFrame():void {
			// dispatch event to all display objects that listen for enter frame
			DisplayObject.sGlobalEventDispatcher.dispatchEvent(new flash.events.Event (flash.events.Event.ENTER_FRAME));
		}

        public function onExitFrame():void {
            // dispatch event to all display objects that listen for exit frame
            DisplayObject.sGlobalEventDispatcher.dispatchEvent(new flash.events.Event (flash.events.Event.EXIT_FRAME));
        }
        
		public override function addChild(child:DisplayObject):DisplayObject {
			return super.addChild(child);
		}
 	 	
		public override function addChildAt(child:DisplayObject, index:int):DisplayObject {
			return super.addChildAt(child, index);
		}
 	 	
		public function assignFocus(objectToFocus:InteractiveObject, direction:String):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function invalidate():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function isFocusInaccessible():Boolean {
			throw new System.NotImplementedException();
		}
 	 	
		public override function removeChildAt(index:int):DisplayObject {
			return super.removeChildAt(index);
		}
 	 	
		public function setAspectRatio(newAspectRatio:String):void {
			throw new System.NotImplementedException();
		}
 	 	
		public override function setChildIndex(child:DisplayObject, index:int):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function setOrientation(newOrientation:String):void {
			throw new System.NotImplementedException();
		}
 	 	
		public override function swapChildrenAt(index1:int, index2:int):void {
			throw new System.NotImplementedException();
		}
 	 	
		private var mStage3Ds:Vector.<Stage3D> = new <Stage3D> [];
	}

}
