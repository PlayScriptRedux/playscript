// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.display {
	import System.NotImplementedException;
	import flash.accessibility.AccessibilityProperties;
    import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.geom.Rectangle;
	import flash.geom.Point;
	import flash.geom.Vector3D;
	import flash.geom.Transform;
	import flash.geom.ColorTransform;
	import flash.geom.Matrix;

	public abstract class DisplayObject extends EventDispatcher implements IBitmapDrawable {
	
		//
		// Properties
		//
	
		public property accessibilityProperties : AccessibilityProperties { get; set; }

 		public property alpha : Number { get; set; }

 	 	public property blendMode : String { get; set; }

 	 	public property blendShader : Shader { set { } }

 	 	public property cacheAsBitmap : Boolean { get; set; }
 	 	
 	 	public property cacheAsBitmapMatrix : Matrix { get; set; }

 	 	public property filters : Array { get; set; }

 	 	public property	height : Number { get; set; }

 	 	public property loaderInfo : LoaderInfo { get { return mLoaderInfo; } }
 	 	
 	 	public property mask : DisplayObject  { get; set; }

 	 	public property mouseX : Number { get; set; }
 	 	
 	 	public property mouseY : Number { get; set; }

 	 	public property name : String { get; set; }

 	 	public property opaqueBackground : Object { get; set; }

		public property parent : DisplayObjectContainer { get { return mParent; }  }

 	 	public property root : DisplayObject { get { return mRoot; } }

 	 	public property rotation : Number { get; set; }

 	 	public property rotationX : Number { get; set; }

 	 	public property rotationY : Number { get; set; }

 	 	public property rotationZ : Number { get; set; }

 	 	public property scale9Grid : Rectangle { get; set; }

 	 	public property scaleX : Number { get; set; }

 	 	public property scaleY : Number { get; set; }

 	 	public property scaleZ : Number { get; set; }

 	 	public property scrollRect : Rectangle { get; set; }

 	 	public property stage : Stage { get { return mStage; } }

 	 	public property transform : Transform { 
			get {
				if (mTransform == null) {
					mTransform = new Transform();
				}
				return mTransform;
			}
			set {
			}
		}

 	 	public property visible : Boolean { get; set; }

 	 	public property width : Number { get; set; }

 	 	public property x : Number { get; set; }

 	 	public property y : Number { get; set; }
 	 	
 	 	public property z : Number { get; set; }

		// 
		// Public Methods
		// 

		// this constructor stage sets the stage that this displayobject is attached to at construction time
		// this is necessary because some root display objects must have their stage set before their constructor is invoked 		
		public static var constructorStage:Stage;
		public static var constructorLoaderInfo:LoaderInfo;
		
		internal var mStage:Stage;
		
		public function DisplayObject() {
			// set global stage and loader info
			mStage 		= constructorStage;
			mLoaderInfo = constructorLoaderInfo;
			mRoot  		= (constructorStage != null) ? this : null;
			alpha 		= 1.0;
		}
		
		public function getBounds(targetCoordinateSpace:DisplayObject):Rectangle {
			if (targetCoordinateSpace == this) {
				// if the target coordinate space is the same as this object then just return our dimensions
				return new Rectangle(0,0,width,height); 
			} else {
				throw new NotImplementedException();
			}
		}
		
		public function getRect(targetCoordinateSpace:DisplayObject):Rectangle {
			throw new NotImplementedException();
		}

 	 	public function globalToLocal(point:Point):Point {
			throw new NotImplementedException();
 	 	}
 	 	
		public function globalToLocal3D(point:Point):Vector3D {
			throw new NotImplementedException();
		}
 	 	
		public function hitTestObject(obj:DisplayObject):Boolean {
			throw new NotImplementedException();
		}
 	 	
		public function hitTestPoint(x:Number, y:Number, shapeFlag:Boolean = false):Boolean {
			throw new NotImplementedException();
		}
 	 	
		public function local3DToGlobal(point3d:Vector3D):Point {
			throw new NotImplementedException();
		}
 	 	
		public function localToGlobal(point:Point):Point {
			// $$TODO
			//trace("not implemented: DisplayObject.localToGlobal");
			return point.clone();
			//throw new NotImplementedException();
		}
        
        // this overrides a method in EventDispatcher
        protected override function getGlobalEventDispatcher(type:String):EventDispatcher
        {
            // track enter/exit frame events using global dispatcher
            if (type == Event.ENTER_FRAME || type == Event.EXIT_FRAME) {
                return sGlobalEventDispatcher;
            } else {
                return null;
            }
        }


		internal var mParent:DisplayObjectContainer;
		internal var mTransform:Transform;

		private readonly var mRoot:DisplayObject;
		private readonly var mLoaderInfo:LoaderInfo;

        
        // DisplayObjects not added to the stage still receive enter/exit frame events so they need to be tracked globally
        // we keep around this list to track all display objects that listen for enter/exit frame events (and perhaps others)
        internal static var sGlobalEventDispatcher:EventDispatcher= new EventDispatcher();

	}

}
