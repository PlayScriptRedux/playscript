// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.display {

	import flash.utils.ByteArray;
	import flash.geom.ColorTransform;
	import flash.geom.Rectangle;
	import flash.geom.Point;
	import flash.geom.Matrix;
	import flash.filters.BitmapFilter;
	import flash.text.TextFormatAlign;
	import System.IO.*;
	import System.Reflection.*;

#if PLATFORM_MONOMAC
	import MonoMac.CoreGraphics.*;
	import MonoMac.Foundation.*;
	import MonoMac.AppKit.*;
#elif PLATFORM_MONOTOUCH
	import MonoTouch.Foundation.*;
	import MonoTouch.CoreGraphics.*;
	import MonoTouch.UIKit.*;
#elif PLATFORM_MONODROID
	import Android.Graphics.BitmapFactory;
	import Android.Graphics.Color;
	import Android.Graphics.Canvas;
	import Android.Graphics.Paint;
	import Android.Graphics.PaintFlags;
	import Android.Graphics.Typeface;
	import Android.App.Application;
	import Android.Graphics.TypefaceStyle;
	import Java.Nio.ByteBuffer;
	import Java.IO.ByteArrayOutputStream;
#endif

	public class BitmapData implements IBitmapDrawable {
	
		//
		// Properties
		//
		
		public property height : int { get { return mHeight; } }

 	 	public property rect : Rectangle { get { return new Rectangle(0,0,width,height); } }

 	 	public property transparent : Boolean { get { return mTransparent; } }

 	 	public property width : int { get { return mWidth; } }

 	 	//
 	 	// Methods
 	 	//
 	 	 	 	
		public function BitmapData(width:int, height:int, transparent:Boolean = true, fillColor:uint = 0xFFFFFFFF) {
			mWidth = width;
			mHeight = height;
			mTransparent = transparent;
			
			// allocate memory
			mData = new System.UInt32[width * height];

			// fill bitmap
			for (var i:int=0; i < mData.Length; i++) {
				mData[i] = fillColor;
			}
		}

		public function applyFilter(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, filter:BitmapFilter):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function clone():BitmapData {
			var clonedBitmapData:BitmapData = new BitmapData(mWidth,mHeight,mTransparent);
			System.Buffer.BlockCopy(mData, 0, clonedBitmapData.mData, 0, mData.Length);
			return clonedBitmapData;
		}
		
		public function colorTransform(rect:Rectangle, colorTransform:ColorTransform):void {
			// only support a full rectangle
			if (rect != null && !rect.equals(this.rect))
				throw new System.NotImplementedException();

			var len:int = mData.Length;
			for (var i:int =0; i < len; i++) {
				mData[i] = colorTransform.transformColor32(mData[i]);
			}
		}
 	 	
		public function compare(otherBitmapData:BitmapData):Object {
			throw new System.NotImplementedException();
		}

		private function convertChannelIndex(channel:uint):uint
		{
			switch (channel)
			{
			case BitmapDataChannel.RED: return 2;		// i think this is right, but may be 2,1,0,3
			case BitmapDataChannel.GREEN: return 1;
			case BitmapDataChannel.BLUE: return 0;
			case BitmapDataChannel.ALPHA: return 3;
			default:
				throw new Error();
			}
		}


		public function copyChannel(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, 
			sourceChannel:uint, destChannel:uint):void {

			// only support a full rectangle
			if (sourceRect != null && !sourceRect.equals(this.rect))
				throw new System.NotImplementedException();

			sourceChannel = convertChannelIndex(sourceChannel);
			destChannel = convertChannelIndex(destChannel);

			var source:uint[] = sourceBitmapData.mData;
			var dest:uint[] = mData;

			var smask:uint = 0xFF << (destChannel * 8);
			var dmask:uint = smask ^ 0xFFFFFFFF;
			var sourceShift:int = (destChannel - sourceChannel) * 8;

			var len:int = source.Length;
			if (sourceShift >= 0)
			{
				// left shift
				for (var i:int =0; i < len; i++) {
					dest[i] = (dest[i] & dmask)  | ((source[i] << sourceShift) & smask);
				}
			}
			else
			{
				// right shift
				sourceShift = -sourceShift;
				for (var i:int =0; i < len; i++) {
					dest[i] = (dest[i] & dmask)  | ((source[i] >> sourceShift) & smask);
				}
			}
		}

		public function copyPixels(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, 
			alphaBitmapData:BitmapData = null, alphaPoint:Point = null, mergeAlpha:Boolean = false):void {

			if (sourceRect.right > sourceBitmapData.width || sourceRect.bottom > sourceBitmapData.height) {
				trace("warning: copyPixels out of bounds");
				return;
			}

			if (mergeAlpha || (alphaBitmapData != null)) {
				//throw new System.NotImplementedException();
				trace("warning: copyPixels alpha merge not implemented.");
			}
									
			var sourceData:System.UInt32[] = sourceBitmapData.getRawData();
			var destData:System.UInt32[] = this.getRawData();
			if (sourceData == null || destData == null) {
				trace("warning: copyPixels disposed bitmapdata");
				return;
			}

			// compute source offset and pitch 
			var sourcePitch:int = (sourceBitmapData.width * 4);
			var sourceOffset:int = (sourcePitch * sourceRect.y) + (sourceRect.x * 4);
			
			// compute dest offset and pitch
			var destPitch:int = (this.width * 4);
			var destOffset:int = (destPitch * destPoint.y) + (destPoint.x * 4);

			var height:int = sourceRect.height;
			for (var y:int = 0; y < height; y++)
			{
				// copy row of pixels
				System.Buffer.BlockCopy(sourceData, sourceOffset, destData, destOffset, sourceRect.width * 4);
			
				// next row
				sourceOffset += sourcePitch;
				destOffset += destPitch;
			}
		}

		public function copyPixelsToByteArray(rect:Rectangle, data:ByteArray):void {
			throw new System.NotImplementedException();
		}

		public function dispose():void {
			mData = null;
		}

 	 	public function draw(source:IBitmapDrawable, matrix:Matrix = null, colorTransform:ColorTransform = null, blendMode:String = null, 
	 	 	clipRect:Rectangle = null, smoothing:Boolean = false):void {

#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH
			if (source is flash.text.TextField)
			{
				var tf:flash.text.TextField = source as flash.text.TextField;
				var format:flash.text.TextFormat = tf.defaultTextFormat;

				// $$TODO figure out how to get rid of this extra data copy
				var sizeToDraw = (width * height)<<2;
				if(sizeToDraw==0)
					return;
				var data = new byte[sizeToDraw];
				System.Buffer.BlockCopy(mData, 0, data, 0, data.Length);

				using (CGBitmapContext context = new CGBitmapContext(data, width, height, 8, 4 * width, 
				                                                 CGColorSpace.CreateDeviceRGB(), 
				                                                 CGImageAlphaInfo.PremultipliedLast))
				{
					var black:CGColor = new CGColor(0f, 0f, 0f, 1f);
					context.SetFillColor(black);
					context.SetStrokeColor(black);
					context.SelectFont(format.font, float(Number(format.size)), CGTextEncoding.MacRoman);
					context.SetAllowsAntialiasing( (tf.antiAliasType == flash.text.AntiAliasType.ADVANCED) );

					var x:Number = matrix.tx;
					var y:Number = matrix.ty;

					// invert y because the CG origin is bottom,left
					y = height - tf.textHeight - y;

					// align text
					switch (format.align)
					{
					case TextFormatAlign.LEFT:
						// no adjustment required
						break;
					case TextFormatAlign.CENTER:
						// center x
						x += width / 2;
						x -= tf.textWidth / 2;
						break;
					case TextFormatAlign.RIGHT:
						// right justify x
						x += width;
						x -= tf.textWidth;
						break;
					default:
						throw new System.NotImplementedException();
					}

					// draw text
					context.ShowTextAtPoint(float(x), float(y), tf.text );
				}

				System.Buffer.BlockCopy(data, 0, mData, 0, data.Length);
			}
			else

#elif PLATFORM_MONODROID

			if ( source is flash.text.TextField )
			{
				var tf:flash.text.TextField = source as flash.text.TextField;
				var format:flash.text.TextFormat = tf.defaultTextFormat;

				// $$TODO figure out how to get rid of this extra data copy
				var data = new byte[width * height * 4];
				System.Buffer.BlockCopy(mData, 0, data, 0, data.Length);

				var config:Android.Graphics.Bitmap.Config = Android.Graphics.Bitmap.Config.Argb8888;
				var bitmap:Android.Graphics.Bitmap = Android.Graphics.Bitmap.CreateBitmap(width, height, config);

				var canvas:Canvas = new Canvas(bitmap);
				var x:Number = matrix.tx;
				var y:Number = matrix.ty;

				// invert y because the CG origin is bottom,left
				// y = height - tf.textHeight - y;

				// align text
				switch (format.align)
				{
					case TextFormatAlign.LEFT:
					// no adjustment required
					break;
					case TextFormatAlign.CENTER:
					// center x
					x += width / 2;
					x -= tf.textWidth / 2;
					break;
					case TextFormatAlign.RIGHT:
					// right justify x
					x += width;
					x -= tf.textWidth;
					break;
					default:
					throw new System.NotImplementedException();
				}

				var paint:Paint = new Paint(PaintFlags.AntiAlias);

				paint.Color = Color.Black;
				paint.TextSize = float(Number(format.size));
				paint.SetTypeface( Typeface.Create(format.font, TypefaceStyle.Normal) );
				paint.TextAlign = Paint.Align.Center;			

				canvas.DrawText(tf.text, float(x), float(y), paint);

				mData = new uint[ bitmap.Width * bitmap.Height ];
				var buffer = new int[ bitmap.Width * bitmap.Height ];
				bitmap.GetPixels(buffer, 0, width, 0, 0, width, height);

				for (var i:int = 0; i < buffer.Length; i++)
				{

					mData[i] = uint(buffer[i]);
				}
			}
			else 
#endif
			if ( source is BitmapData)
			{
				//naive implementation , 
				//to be implemented: 
				// -smoothing / antialiasing, 
				// -blend mode
				// -colorTransform
				// -cliprect
				var sourceBitmap:BitmapData = source as BitmapData;
				var matInverse:Matrix = (matrix!=null) ? matrix.clone() : new Matrix();
				matInverse.invert();
				
				for(var y:int =0;y<mHeight;y++)
				{	
					for(var x:int =0;x<mWidth;x++)
					{
						var x2:int = x * matInverse.a + y * matInverse.c + matInverse.tx;
						var y2:int = x * matInverse.b + y * matInverse.d + matInverse.ty;
						if(x2>=0 && y2>=0 && x2<sourceBitmap.width && y2< sourceBitmap.height)
						{
							mData[x + y*mWidth ] = sourceBitmap.mData[ x2 + y2* sourceBitmap.mWidth ];
						}	
					}
				}
			}
			else
			{
				trace("NotImplementedWarning: BitmapData.draw()");
			}
 	 	}
 	 	
		public function drawWithQuality(source:IBitmapDrawable, matrix:Matrix = null, colorTransform:ColorTransform = null, blendMode:String = null, 
			clipRect:Rectangle = null, smoothing:Boolean = false, quality:String = null):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function encode(rect:Rectangle, compressor:Object, byteArray:ByteArray = null):ByteArray {
			throw new System.NotImplementedException();
		}
 	 	
		public function fillRect(rect:Rectangle, color:uint):void {
			if(mData==null)
				return;
			var xmin:int = rect.left;
			if(xmin<0) xmin=0;
			if(xmin>=mWidth) xmin=mWidth-1;
			var xmax:int = rect.left + rect.width;
			if(xmax<0) xmax=0;
			if(xmax>mWidth) xmax=mWidth;
			var ymin:int = rect.top;
			if(ymin<0) ymin=0;
			if(ymin>=mHeight) ymin=mHeight-1;
			var ymax:int = rect.top + rect.height;
			if(ymax<0) ymax=0;
			if(ymax>mHeight) ymax=mHeight;
			xmax -=xmin;
			
			var dest:uint[] = mData;

			// fill bitmap rectangle
			for (var y:int=ymin;y<ymax;y++)
			{
				var adr:int = y*mWidth+xmin;
				for (var x:int=0;x<xmax;x++)
				{
					dest[adr+x] = color;
				}
			}
		}
 	 	
		public function floodFill(x:int, y:int, color:uint):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function generateFilterRect(sourceRect:Rectangle, filter:BitmapFilter):Rectangle {
			throw new System.NotImplementedException();
		}
 	 	
		public function getColorBoundsRect(mask:uint, color:uint, findColor:Boolean = true):Rectangle {
			throw new System.NotImplementedException();
		}
 	 	
		public function getPixel(x:int, y:int):uint {
			if (x < 0 || y < 0 || x >= width || y >= height) {			
				throw new System.ArgumentOutOfRangeException("XY position out of range");
			}
			
			// return color
			return mData[y * mWidth + x];
		}
		
		public function getPixel32(x:int, y:int):uint {
			throw new System.NotImplementedException();
		}

		public function getPixels(rect:Rectangle):ByteArray {
			throw new System.NotImplementedException();
		}
 	 	
		public function getVector(rect:Rectangle):Vector.<uint> {
			throw new System.NotImplementedException();
		}

		public function histogram(hRect:Rectangle = null):Vector.<Vector.<Number>> {
			throw new System.NotImplementedException();
		}

		public function hitTest(firstPoint:Point, firstAlphaThreshold:uint, secondObject:Object, 
			secondBitmapDataPoint:Point = null, secondAlphaThreshold:uint = 1):Boolean {
			throw new System.NotImplementedException();
		}

		public function @lock():void {
			throw new System.NotImplementedException();
		}

		public function merge(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, 
			redMultiplier:uint, greenMultiplier:uint, blueMultiplier:uint, alphaMultiplier:uint):void {
			throw new System.NotImplementedException();
		}

		public function noise(randomSeed:int, low:uint = 0, high:uint = 255, channelOptions:uint = 7, grayScale:Boolean = false):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function paletteMap(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, 
			redArray:Array = null, greenArray:Array = null, blueArray:Array = null, alphaArray:Array = null):void {
			throw new System.NotImplementedException();
		}

		public function perlinNoise(baseX:Number, baseY:Number, numOctaves:uint, randomSeed:int, 
			stitch:Boolean, fractalNoise:Boolean, channelOptions:uint = 7, grayScale:Boolean = false, offsets:Array = null):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function pixelDissolve(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, 
			randomSeed:int = 0, numPixels:int = 0, fillColor:uint = 0):int {
			throw new System.NotImplementedException();
		}
 	 	
		public function scroll(x:int, y:int):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function setPixel(x:int, y:int, color:uint):void {
			if (x < 0 || y < 0 || x >= width || y >= height) {			
				throw new System.ArgumentOutOfRangeException("XY position out of range");
			}
			
			// store color
			mData[y * mWidth + x] = color;
		}

		public function setPixel32(x:int, y:int, color:uint):void {
			if (x < 0 || y < 0 || x >= width || y >= height) {
				throw new System.ArgumentOutOfRangeException("XY position out of range");
			}
			
			// store color
			mData[y * mWidth + x] = color;
		}
 	 	
		public function setPixels(rect:Rectangle, inputByteArray:ByteArray):void {
			// we only support setpixels for the full bitmap for now
			if (rect.x == 0 && rect.y == 0 && rect.width == this.width && rect.height == this.height)
			{
				var count:int = width * height;
				for (var i:int=0; i < count; i++)
				{
					mData[i] = inputByteArray.readUnsignedInt(); 
				}
			}
			else
			{
				throw new System.NotImplementedException();
			}
		}

		public function setVector(rect:Rectangle, inputVector:Vector.<uint>):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function threshold(sourceBitmapData:BitmapData, sourceRect:Rectangle, destPoint:Point, operation:String, 
			threshold:uint, color:uint = 0, mask:uint = 0xFFFFFFFF, copySource:Boolean = false):uint {
			throw new System.NotImplementedException();
		}
 	 	
		public function unlock(changeRect:Rectangle = null):void {
			throw new System.NotImplementedException();
		}
		
		public function getRawData():System.UInt32[] {
			return mData;
		}

#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH

		public static function loadFromCGImage(image:CGImage):BitmapData
		{
			var width:int = image.Width;
			var height:int = image.Height;

			var data = new byte[width * height * 4];
			using (CGContext context = new CGBitmapContext (data, width, height, 8, 4 * width, image.ColorSpace, CGImageAlphaInfo.PremultipliedLast)) {
				// Set the blend mode to copy before drawing since the previous contents of memory aren't used. 
				// This avoids unnecessary blending.
				context.SetBlendMode (CGBlendMode.Copy);
				context.DrawImage (new System.Drawing.RectangleF (0, 0, width, height), image);
			}
			image.Dispose();

			// allocate new bitmap data and copy into it
			var bd:BitmapData = new flash.display.BitmapData(width, height, true);
			System.Buffer.BlockCopy(data, 0, bd.getRawData(), 0, width * height * 4);
			return bd;
		}

#endif		
		
		public static function loadFromByteArray(byteArray:ByteArray):BitmapData
		{
#if PLATFORM_MONOMAC || PLATFORM_MONOTOUCH 

				// get NSData from byte array
				var nsData:NSData = NSData.FromStream(byteArray.getRawStream());

	#if PLATFORM_MONOMAC		
				// create NSImage from NSData
				var src:NSImage = new NSImage(nsData);
				var rect:System.Drawing.RectangleF = System.Drawing.RectangleF.Empty;
				var image:CGImage = src.AsCGImage (ref rect, null, null);
				var bd:BitmapData = BitmapData.loadFromCGImage(image);
				src.Dispose();
				return bd;
	#elif PLATFORM_MONOTOUCH
				// create CGImage from NSData
				var image:CGImage = (new UIImage(nsData)).CGImage;
				var bd:BitmapData = BitmapData.loadFromCGImage(image);
				return bd;
	#endif

#elif PLATFORM_MONODROID
			var bitmap:Android.Graphics.Bitmap = BitmapFactory.DecodeByteArray(byteArray.getRawArray(), 0, byteArray.length);
			var buffer = new int[ bitmap.Width * bitmap.Height ];
			bitmap.GetPixels(buffer, 0, bitmap.Width, 0, 0, bitmap.Width, bitmap.Height);

			// allocate new bitmap data and copy into it
			var width:int = bitmap.Width;
			var height:int = bitmap.Height;
			var data = new uint[ bitmap.Width * bitmap.Height ];
			for ( var i:int = 0; i < buffer.Length; i++ )
			{
				var alpha:int = Color.GetAlphaComponent( buffer[i] );
				var red:int = Color.GetRedComponent( buffer[i] );
				var green:int = Color.GetGreenComponent( buffer[i] );
				var blue:int = Color.GetBlueComponent( buffer[i] );

				data[i] = (alpha << 24) + (blue << 16) + (green << 8) + red;
			}

			var bd:BitmapData = new flash.display.BitmapData(width, height, true);
			bd.mData = data;
			return bd;
#else
			throw new System.NotImplementedException();
#endif

		}

//		public static var totalBytesLoaded:int = 0;

		public static function loadFromPath(path:String):BitmapData
		{
			var fullpath = PlayScript.Player.ResolveResourcePath(path);
			var bd:BitmapData;
#if PLATFORM_MONOMAC		
			// create NSImage from path
			var src:NSImage = new NSImage (fullpath);
			var rect:System.Drawing.RectangleF = System.Drawing.RectangleF.Empty;
			var image:CGImage = src.AsCGImage (ref rect, null, null);
			bd = BitmapData.loadFromCGImage(image);
            src.Dispose();
#elif PLATFORM_MONOTOUCH
			// create CGImage from path
			var image:CGImage = (new UIImage(fullpath)).CGImage;
			bd = BitmapData.loadFromCGImage(image);
#elif PLATFORM_MONODROID
			var stream:Stream;
			try 
			{
			    stream = Application.Context.Assets.Open(fullpath);
			}
			// if cannot load as assets, try loading it as plain file
			// disable the ex defined but not used "warning as error"
			#pragma warning disable 0168
			catch (ex:Java.IO.FileNotFoundException)
			#pragma warning restore 0168
			{
				stream = File.OpenRead(path);
			}

			var memStream:MemoryStream = new MemoryStream();
			stream.CopyTo(memStream);
			var data:byte[] = memStream.ToArray();

			bd = BitmapData.loadFromByteArray( ByteArray.fromArray(data) );
#else
			throw new System.NotImplementedException();
#endif

//			var size:int = bd.width * bd.height * 4;
//			totalBytesLoaded += size;
//			trace("BitmapData loaded path:" + path + " size:" + size +  " total:" + totalBytesLoaded);
			return bd;
		}
		
		private var mWidth:int;
		private var mHeight:int;
		private var mTransparent:Boolean;
		private var mData:uint[];
	}

}
