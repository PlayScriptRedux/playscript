// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.display {

	import flash.utils.ByteArray;
	import flash.net.URLRequest;
	import flash.system.LoaderContext;
	import flash.events.*;
	import flash.desktop.IFilePromise;
	import flash.utils.Timer;
	import flash.net.URLLoader;
	import flash.net.URLLoaderDataFormat;
	
	public class Loader extends DisplayObjectContainer {
	
		//
		// Properties
		//
	
		public property content : DisplayObject { get { return mContent; } }

 	 	public property contentLoaderInfo : LoaderInfo { get { return mLoaderInfo; } }

 	 	public property uncaughtErrorEvents : UncaughtErrorEvents { get { return null; } }

 	 	//
 	 	// Methods
 	 	//
 	 	
		public function Loader() {
			mLoaderInfo.loader = this;
		}
 	 	
		public function close():void {
			// throw new System.NotImplementedException();
		}
 	 	
		public function load(request:URLRequest, context:LoaderContext = null):void {

			mRequest = request;
			mContext = context;

//			mUrlLoader = new URLLoader();
//			mUrlLoader.dataFormat = URLLoaderDataFormat.BINARY;
//			mUrlLoader.addEventListener(Event.COMPLETE, onLoadComplete);
//			mUrlLoader.load(request);

			mLoaderInfo.url = request.url;

			// enqueue action to occur on next frame
			URLLoader.enqueueAction(doLoad);
		}

//		private function onLoadComplete(ev:Event):void {
//			loadBytes ( ByteArray(mUrlLoader.data), mContext);
//		}

		private function doLoad():void {

			var span = Telemetry.Session.BeginSpan();

			// TODO: this code also only does synchronous loading from local paths (need to support async and http)
			var resource:Object = PlayScript.Player.LoadResource(mRequest.url, mRequest.contentType);
			
			// set as content
			mContent = resource as flash.display.DisplayObject;
			
			// store content in content loader info (also)
			mLoaderInfo.content = mContent;
			
			// dispatch complete event
			var e:Event = new Event(Event.COMPLETE);
			this.contentLoaderInfo.dispatchEvent(e);

			Telemetry.Session.EndSpanValue(".network.loadfile", span, mRequest.url);
		}
 	 	
		public function loadBytes(bytes:ByteArray, context:LoaderContext = null):void {

			bytes.position = 0;
			var sig:String = bytes.readUTFBytes(3);
			bytes.position = 0;

			if (sig == "CWS" || sig == "FWS" ) {
				trace("warning: swf loading not implemented");
				// TODO
				mContent = new Sprite(); 

			} else {

				// note that this code assumes that bytes is a bitmap, but it may not be
				var bd:BitmapData = BitmapData.loadFromByteArray(bytes);

				// set content as bitmap
				mContent = new Bitmap(bd);
			} 

			
			// store content in content loader info (also)
			this.contentLoaderInfo.content = mContent;
			this.contentLoaderInfo.bytesLoaded = bytes.length;
			this.contentLoaderInfo.bytesTotal  = bytes.length;

			// dispatch complete event
			var e:Event = new Event(Event.COMPLETE);
			this.contentLoaderInfo.dispatchEvent(e);
		}
 	 	
		public function loadFilePromise(promise:IFilePromise, context:LoaderContext = null):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function unload():void {
			throw new System.NotImplementedException();
		}
 	 	
		public function unloadAndStop(gc:Boolean = true):void {
			throw new System.NotImplementedException();
		}
		
		var mContent:DisplayObject = null;
		var mLoaderInfo:LoaderInfo = new LoaderInfo();
		var mRequest:URLRequest = null;
#pragma warning disable 414		// fields are assigned but values are never used
		var mContext:LoaderContext = null;
		var mUrlLoader:URLLoader = null;
#pragma warning restore 414
	
	}

}
