// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.geom {

	public final class Point {

		//
		// Properties
		//
		
		public property length : Number { 
			get { return System.Math.Sqrt(x * x + y * y); }
		}

		public var x : Number;

		public var y : Number;

		// 
		// Methods 
		//
		

		public function Point(x:Number = 0, y:Number = 0) {
			this.x = x;
			this.y = y;
		}
 	 	
		public function add(v:Point):Point {
			return new Point(this.x + v.x, this.y + v.y);
		}
 	 	
		public function clone():Point {
			return new Point(this.x, this.y);
		}
 	 	
		public function copyFrom(sourcePoint:Point):void {
			this.x = sourcePoint.x;
			this.y = sourcePoint.y;
		}
 	 	
		public static function distance(pt1:Point, pt2:Point):Number {
			var dx:Number = pt1.x - pt2.x;
			var dy:Number = pt1.y - pt2.y;
			return System.Math.Sqrt(dx * dx + dy * dy);
		}
 	 	
		public function equals(toCompare:Point):Boolean {
			return this.x == toCompare.x && this.y == toCompare.y;
		}
 	 	
		public function interpolate(pt1:Point, pt2:Point, f:Number):Point {
			return new Point(pt1.x + (pt2.x - pt1.x) * f, pt1.y + (pt2.y - pt1.y) * f);
		}
 	 	
		public function normalize(thickness:Number):void {
			var l:Number = System.Math.Sqrt(x * x + y * y);
			this.x = x / l;
			this.y = y / l;
		}

		public function offset(dx:Number, dy:Number):void {
			this.x += dx;
			this.y += dy;
		}
 	 	
 	 	public static function polar(len:Number, angle:Number):Point {
			var x:Number = len * Math.cos(angle);
			var y:Number = len * Math.sin(angle);
			return new Point(x, y);
		}
 	 	
		public function setTo(xa:Number, ya:Number):void {
			this.x = xa;
			this.y = ya;
		}
 	 	
		public function subtract(v:Point):Point {
			return new Point(this.x - v.x, this.y - v.y);
		}
 	 	
		public override function toString():String {
			return "(" + this.x + "," + this.y + ")";
		}
		
	}

}
