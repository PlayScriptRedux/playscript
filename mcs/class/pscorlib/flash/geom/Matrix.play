// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.geom {

	public final class Matrix {
	
		private static var sTemp:Matrix = new Matrix();

		//
		// Properties
		//
	
		public var a : Number;

		public var b : Number;

		public var c : Number;

		public var d : Number;

		public var tx : Number;

		public var ty : Number;

 	 	//
 	 	// Methods 
 	 	//
 	 	 
 	 	public function Matrix(a:Number = 1, b:Number = 0, c:Number = 0, d:Number = 1, tx:Number = 0, ty:Number = 0) {
 	 		this.a = a;
 	 		this.b = b;
 	 		this.c = c;
 	 		this.d = d;
 	 		this.tx = tx;
 	 		this.ty = ty;
 	 	}
 	 	
		public function clone():Matrix {
			return new Matrix(a,b,c,d,tx,ty);
		}


		// dest = m * n
		private static function multiply(dest:Matrix, m:Matrix, n:Matrix):void
		{
			var a:Number = n.a * m.a + n.c * m.b;
			var b:Number = n.b * m.a + n.d * m.b;
			var c:Number = n.a * m.c + n.c * m.d;
			var d:Number = n.b * m.c + n.d * m.d;
			var tx:Number= n.a * m.tx + n.c * m.ty + n.tx;
			var ty:Number= n.b * m.tx + n.d * m.ty + n.ty; 

			dest.a  = a;
			dest.b  = b;
			dest.c  = c;
			dest.d  = d;
			dest.tx = tx;
			dest.ty = ty;
		}
 	 	
		public function concat(m:Matrix):void {
			multiply(this, this, m);
		}

 	 	public function copyColumnFrom(column:uint, vector3D:Vector3D):void {
			throw new System.NotImplementedException();
 	 	}
 	 	
		public function copyColumnTo(column:uint, vector3D:Vector3D):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function copyFrom(sourceMatrix:Matrix):void {
			this.a = sourceMatrix.a;
			this.b = sourceMatrix.b;
			this.c = sourceMatrix.c;
			this.d = sourceMatrix.d;
			this.tx = sourceMatrix.tx;
			this.ty = sourceMatrix.ty;
		}
 	 	
		public function copyRowFrom(row:uint, vector3D:Vector3D):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function copyRowTo(row:uint, vector3D:Vector3D):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function createBox(scaleX:Number, scaleY:Number, rotation:Number = 0, tx:Number = 0, ty:Number = 0):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function createGradientBox(width:Number, height:Number, rotation:Number = 0, tx:Number = 0, ty:Number = 0):void {
			throw new System.NotImplementedException();
		}
 	 	
		public function deltaTransformPoint(point:Point):Point {
			throw new System.NotImplementedException();
		}
 	 	
		public function identity():void {
			this.a = 1;
 	 		this.b = 0;
 	 		this.c = 0;
 	 		this.d = 1;
 	 		this.tx = 0;
 	 		this.ty = 0;
		}
 	 	
		public function invert():void {
			var det:Number = 1.0 / (a * d - b * c);

			var ta:Number =  d * det;
			var tb:Number = -b * det;
			var tc:Number = -c * det;
			var td:Number =  a * det;
			var ttx:Number =  (c * ty - d * tx) * det;
			var tty:Number =  (b * tx - a * ty) * det;
			
			this.a = ta;
			this.b = tb;
			this.c = tc;
			this.d = td;
			this.tx = ttx;
			this.ty = tty;
		}
 	 	
		public function rotate(angle:Number):void {
			// $$TODO optimize
			var sin:Number = System.Math.Sin(angle);
			var cos:Number = System.Math.Cos(angle);
			 
			sTemp.a =  cos;
			sTemp.b =  sin;
			sTemp.c = -sin;
			sTemp.d =  cos;
			sTemp.tx = 0;
			sTemp.ty = 0;
			concat(sTemp);
		}
 	 	
		public function scale(sx:Number, sy:Number):void {
			// $$TODO optimize
			sTemp.a =  sx;
			sTemp.b =  0;
			sTemp.c =  0;
			sTemp.d =  sy;
			sTemp.tx = 0;
			sTemp.ty = 0;
			concat(sTemp);
		}
 	 	
		public function setTo(a:Number, b:Number, c:Number, d:Number, tx:Number, ty:Number):void {
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
			this.tx = tx;
			this.ty = ty;
		}
 	 	
		public override function toString():String {
			return System.String.Format("[{0} {1} {2} {3} {4} {5}]", a,b,c,d,tx,ty);
		}
 	 	 
		public function transformPoint(point:Point):Point {
			throw new System.NotImplementedException();
		}
 	 	
		public function translate(dx:Number, dy:Number):void {
			// $$TODO optimize - just transform dx,dy by this matrix
			sTemp.a =  1;
			sTemp.b =  0;
			sTemp.c =  0;
			sTemp.d =  1;
			sTemp.tx = dx;
			sTemp.ty = dy;
			concat(sTemp);
		}
	
	}


}
