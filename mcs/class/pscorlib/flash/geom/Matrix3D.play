// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package flash.geom {

	public final class Matrix3D {
	
		private static var sTempMatrix:Matrix3D = new Matrix3D();
		private static var sTempVector:Vector3D = new Vector3D();

		//
		// Properties
		//
	
		public property determinant : Number { 
			get { 
				throw new System.NotImplementedException();
			} 
		}

 	 	public property position : Vector3D 
		{ 
			get {return new Vector3D(mData[12], mData[13], mData[14]);}
		}

 	 	public property rawData : Vector.<Number> 
		{ 
			get
			{
				// allocate vector on demand, this is gross
				var rd:Vector.<Number> = new Vector.<Number>(16);

				// copy array to vector
				for (var i:int=0; i < 16; i++)
				{
					rd[i] = mData[i]; 
				}

				return rd;
			}
			set
			{
				// copy to internal array
				for (var i:int=0; i < 16; i++)
				{
					mData[i] = value[i]; 
				}
			}
		}

		//
		// Methods
		//
		
		public function Matrix3D(v:Vector.<Number> = null) {
			if (v == null)
			{
				identity();
			}
			else
			{
				var inputLength:int = Math.min(v.length, 16);
				for (var i:int = 0 ; i < inputLength ; ++i)
				{
					mData[i] = v[i];
				}
			}
		}

		// matrix4x4 concatenation
		// result = lhs * rhs
		private static function concat(result:Matrix3D, lhs:Matrix3D, rhs:Matrix3D):void
		{
			var a:double[] = rhs.mData;
			var b:double[] = lhs.mData;
			
			// concat 4x4 matrices
			var m0:Number = a[0]  * b[0] + a[1]  * b[4] + a[2]  * b[8]  + a[3]  * b[12];
			var m1:Number = a[0]  * b[1] + a[1]  * b[5] + a[2]  * b[9]  + a[3]  * b[13];
			var m2:Number = a[0]  * b[2] + a[1]  * b[6] + a[2]  * b[10] + a[3]  * b[14];
			var m3:Number = a[0]  * b[3] + a[1]  * b[7] + a[2]  * b[11] + a[3]  * b[15];
			
			var m4:Number = a[4]  * b[0] + a[5]  * b[4] + a[6]  * b[8]  + a[7]  * b[12];
			var m5:Number = a[4]  * b[1] + a[5]  * b[5] + a[6]  * b[9]  + a[7]  * b[13];
			var m6:Number = a[4]  * b[2] + a[5]  * b[6] + a[6]  * b[10] + a[7]  * b[14];
			var m7:Number = a[4]  * b[3] + a[5]  * b[7] + a[6]  * b[11] + a[7]  * b[15];
			
			var m8:Number = a[8]  * b[0] + a[9]  * b[4] + a[10] * b[8]  + a[11] * b[12];
			var m9:Number = a[8]  * b[1] + a[9]  * b[5] + a[10] * b[9]  + a[11] * b[13];
			var m10:Number= a[8]  * b[2] + a[9]  * b[6] + a[10] * b[10] + a[11] * b[14];
			var m11:Number= a[8]  * b[3] + a[9]  * b[7] + a[10] * b[11] + a[11] * b[15];
			
			var m12:Number= a[12] * b[0] + a[13] * b[4] + a[14] * b[8]  + a[15] * b[12];
			var m13:Number= a[12] * b[1] + a[13] * b[5] + a[14] * b[9]  + a[15] * b[13];
			var m14:Number= a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14];
			var m15:Number= a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15];
			
			// store result
			var o:double[] = result.mData;
			o[0] = m0;
			o[1] = m1;
			o[2] = m2;
			o[3] = m3;
			o[4] = m4;
			o[5] = m5;
			o[6] = m6;
			o[7] = m7;
			o[8] = m8;
			o[9] = m9;
			o[10] = m10;
			o[11] = m11;
			o[12] = m12;
			o[13] = m13;
			o[14] = m14;
			o[15] = m15;
		}
 	 	
		public function append(lhs:Matrix3D):void {
			concat(this, lhs, this);
		}

		private static function createAxisAngleRotationMatrix(outMatrix:Matrix3D, degrees:Number, axis:Vector3D, pivotPoint:Vector3D = null):void
		{
			if (pivotPoint != null) throw new System.NotImplementedException();
			
			var radians:Number = degrees*(System.Math.PI / 180.0);
			var sin:Number = System.Math.Sin(radians);
			var cos:Number = System.Math.Cos(radians);
			var invCos:Number = 1.0 - cos;

			var x:Number = axis.x;
			var y:Number = axis.y;
			var z:Number = axis.z;

			var xx:Number = x * x;
			var yy:Number = y * y;
			var zz:Number = z * z;
			
			// normalize
			var invScale:Number = 1.0 / System.Math.Sqrt(xx + yy + zz);
			x *= invScale;
			y *= invScale;
			z *= invScale;
			
			var xy:Number = x * y;
			var yz:Number = y * z;
			var zx:Number = z * x;
			
			var xs:Number = x * sin;
			var ys:Number = y * sin;
			var zs:Number = z * sin;
			

			// write matrix			
			var m:double[] = outMatrix.mData;
			m[0] = (invCos * xx) + cos;
			m[1] = (invCos * xy) + zs;
			m[2] = (invCos * zx) - ys;
			m[3] = 0.0;
			
			m[4] = (invCos * xy) - zs;
			m[5] = (invCos * yy) + cos;
			m[6] = (invCos * yz) + xs;
			m[7] = 0.0;
			
			m[8] = (invCos * zx) + ys;
			m[9] = (invCos * yz) - xs;
			m[10] =(invCos * zz) + cos;
			m[11] = 0.0;
			
			m[12] = 0.0;
			m[13] = 0.0;
			m[14] = 0.0;
			m[15] = 1.0;
		}

		private static function createScaleMatrix(outMatrix:Matrix3D, sx:Number, sy:Number, sz:Number):void
		{
			var m:double[] = outMatrix.mData;
			m[0] = sx;
			m[1] = 0.0;
			m[2] = 0.0;
			m[3] = 0.0;
			
			m[4] = 0.0;
			m[5] = sy;
			m[6] = 0.0;
			m[7] = 0.0;
			
			m[8] = 0.0;
			m[9] = 0.0;
			m[10]= sz;
			m[11]= 0.0;
			
			m[12]= 0.0;
			m[13]= 0.0;
			m[14]= 0.0;
			m[15]= 1.0;
		}

		private static function createTranslationMatrix(outMatrix:Matrix3D, tx:Number, ty:Number, tz:Number):void
		{
			var m:double[] = outMatrix.mData;
			m[0] = 1.0;
			m[1] = 0.0;
			m[2] = 0.0;
			m[3] = 0.0;
			
			m[4] = 0.0;
			m[5] = 1.0;
			m[6] = 0.0;
			m[7] = 0.0;
			
			m[8] = 0.0;
			m[9] = 0.0;
			m[10]= 1.0;
			m[11]= 0.0;
			
			m[12]= tx;
			m[13]= ty;
			m[14]= tz;
			m[15]= 1.0;
		}

		public function appendRotation(degrees:Number, axis:Vector3D, pivotPoint:Vector3D = null):void {
			// create matrix and append it
			createAxisAngleRotationMatrix(sTempMatrix, degrees, axis, pivotPoint);
			append(sTempMatrix);
		}
 	 	
		public function appendScale(xScale:Number, yScale:Number, zScale:Number):void {
			// create matrix and append it
			// $$TODO optimize this
			createScaleMatrix(sTempMatrix, xScale, yScale, zScale);
			append(sTempMatrix);
		}
 	 	
		public function appendTranslation(x:Number, y:Number, z:Number):void {
			// create matrix and append it
			// $$TODO optimize this
			createTranslationMatrix(sTempMatrix, x, y, z);
			append(sTempMatrix);
		}
 	 	
		public function clone():Matrix3D {
			var m:Matrix3D = new Matrix3D();
			m.copyFrom(this);
			return m;
		}
 	 	
		public function copyColumnFrom(column:uint, vector3D:Vector3D):void {
			var i:int = (column * 4);
			mData[i + 0] = vector3D.x;
			mData[i + 1] = vector3D.y;
			mData[i + 2] = vector3D.z;
			mData[i + 3] = vector3D.w;
		}
 	 	
		public function copyColumnTo(column:uint, vector3D:Vector3D):void {
			var i:int = (column * 4);
			vector3D.x = mData[i + 0];
			vector3D.y = mData[i + 1];
			vector3D.z = mData[i + 2];
			vector3D.w = mData[i + 3];
		}
 	 	
		public function copyFrom(sourceMatrix3D:Matrix3D):void {
			var source:double[] = sourceMatrix3D.mData;
			for (var i:int=0; i < 16; i++) {
				mData[i] = source[i];
			}
		}
 	 	
		public function copyRawDataFrom(vector:Vector.<Number>, index:uint = 0, transpose:Boolean = false):void {
			if (!transpose)
			{
				for (var i:int=0; i < 16; i++) {
					mData[i] = vector[index + i];
				}
			}
			else
			{
				// copy transposed
				mData[0] = vector[index + 0];
				mData[4] = vector[index + 1];
				mData[8] = vector[index + 2];
				mData[12]= vector[index + 3];
				 
				mData[1] = vector[index + 4];
				mData[5] = vector[index + 5];
				mData[9] = vector[index + 6];
				mData[13]= vector[index + 7];
				
				mData[2] = vector[index + 8];
				mData[6] = vector[index + 9];
				mData[10]= vector[index + 10];
				mData[14]= vector[index + 11];
				
				mData[3] = vector[index + 12];
				mData[7] = vector[index + 13];
				mData[11]= vector[index + 14];
				mData[15]= vector[index + 15];
			}
		}
 	 	
		public function copyRawDataTo(vector:Vector.<Number>, index:uint = 0, transpose:Boolean = false):void {
			if (!transpose)
			{
				for (var i:int=0; i < 16; i++) {
					vector[index + i] = mData[i];
				}
			}
			else
			{
				// copy transposed
				vector[index + 0] = mData[0];
				vector[index + 1] = mData[4];
				vector[index + 2] = mData[8];
				vector[index + 3] = mData[12];

				vector[index + 4] = mData[1];
				vector[index + 5] = mData[5];
				vector[index + 6] = mData[9];
				vector[index + 7] = mData[13];

				vector[index + 8] = mData[2];
				vector[index + 9] = mData[6];
				vector[index + 10] = mData[10];
				vector[index + 11] = mData[14];

				vector[index + 12] = mData[3];
				vector[index + 13] = mData[7];
				vector[index + 14] = mData[11];
				vector[index + 15] = mData[15];
			}
		}
 	 	
		public function copyRowFrom(row:uint, vector3D:Vector3D):void {
			var i:int = row;
			mData[i + 0] = vector3D.x;
			mData[i + 4] = vector3D.y;
			mData[i + 8] = vector3D.z;
			mData[i +12] = vector3D.w;
		}
 	 	
		public function copyRowTo(row:uint, vector3D:Vector3D):void {
			var i:int = row;
			vector3D.x = mData[i + 0];
			vector3D.y = mData[i + 4];
			vector3D.z = mData[i + 8];
			vector3D.w = mData[i +12];
		}
 	 	
		public function copyToMatrix3D(dest:Matrix3D):void {
			var d:double[] = dest.mData;
			for (var i:int=0; i < 16; i++) {
				d[i] = mData[i];
			}
		}
		
		public function decompose(orientationStyle:String = Orientation3D.EULER_ANGLES):Vector.<Vector3D> {
			// get translation
			var translation:Vector3D = new Vector3D(mData[12], mData[13], mData[14]);

			// get scale
			var scale:Vector3D = new Vector3D(1,1,1);
			this.copyRowTo(0,sTempVector);
			scale.x = sTempVector.length;
			this.copyRowTo(1,sTempVector);
			scale.y = sTempVector.length;
			this.copyRowTo(2,sTempVector);
			scale.z = sTempVector.length;

			// get rotation 3x3
			// $$TODO probably need to remove scale FIRST before decomposing rotation
			var r11:Number = mData[0];
			var r21:Number = mData[1];
			var r31:Number = mData[2];
			
			var r12:Number = mData[4];
			var r22:Number = mData[5];
			var r32:Number = mData[6];

			var r13:Number = mData[8];
			var r23:Number = mData[9];
			var r33:Number = mData[10];

			var rotation:Vector3D = new Vector3D();
			switch (orientationStyle)
			{
			case Orientation3D.EULER_ANGLES:
				{
					rotation.x = System.Math.Atan2(r32, r33);
					rotation.y =-System.Math.Asin(r31);
					rotation.z = System.Math.Atan2(r21, r11);
				}
				break;
			case Orientation3D.AXIS_ANGLE:
				{
					// compute axis
					rotation.x = r32 - r23;
					rotation.y = r13 - r31;
					rotation.z = r21 - r12;
					rotation.normalize();
					
					// compute angle
					rotation.w = System.Math.Acos((r11 + r22 + r33 - 1)/2);
					break;
				}
			case Orientation3D.QUATERNION:
				throw new System.NotImplementedException();
			}

			return new <Vector3D>[translation, rotation, scale];
		}
 	 	
		public function deltaTransformVector(v:Vector3D):Vector3D {
			var x:Number = v.x, y:Number = v.y, z:Number = v.z;
		    return new Vector3D ((x * rawData[0] + y * rawData[4] + z * rawData[8] + rawData[3]), (x * rawData[1] + y * rawData[5] + z * rawData[9] + rawData[7]), (x * rawData[2] + y * rawData[6] + z * rawData[10] + rawData[11]), 0);
		}
 	 	
		public function identity():void {
			mData[0] = 1.0;
			mData[1] = 0.0;
			mData[2] = 0.0;
			mData[3] = 0.0;

			mData[4] = 0.0;
			mData[5] = 1.0;
			mData[6] = 0.0;
			mData[7] = 0.0;

			mData[8] = 0.0;
			mData[9] = 0.0;
			mData[10]= 1.0;
			mData[11]= 0.0;

			mData[12]= 0.0;
			mData[13]= 0.0;
			mData[14]= 0.0;
			mData[15]= 1.0;
		}
 	 	
		public static function interpolate(thisMat:Matrix3D, toMat:Matrix3D, percent:Number):Matrix3D {
			throw new System.NotImplementedException();
		}
 	 	
		public function interpolateTo(toMat:Matrix3D, percent:Number):void {
			throw new System.NotImplementedException();
		}

		public function invert():Boolean {
			var m:double[] = mData;
			var i0:double  =  (m[5]  * m[10] * m[15]) - (m[5]  * m[11] * m[14]) - (m[9]  * m[6]  * m[15]) + (m[9]  * m[7]  * m[14]) + (m[13] * m[6]  * m[11]) - (m[13] * m[7] * m[10]);
			var i1:double  = -(m[1]  * m[10] * m[15]) + (m[1]  * m[11] * m[14]) + (m[9]  * m[2]  * m[15]) - (m[9]  * m[3]  * m[14]) - (m[13] * m[2]  * m[11]) + (m[13] * m[3] * m[10]);
			var i2:double  =  (m[1]  * m[6]  * m[15]) - (m[1]  * m[7]  * m[14]) - (m[5]  * m[2]  * m[15]) + (m[5]  * m[3]  * m[14]) + (m[13] * m[2]  * m[7])  - (m[13] * m[3] * m[6]);
			var i3:double  = -(m[1]  * m[6]  * m[11]) + (m[1]  * m[7]  * m[10]) + (m[5]  * m[2]  * m[11]) - (m[5]  * m[3]  * m[10]) - (m[9]  * m[2]  * m[7])  + (m[9]  * m[3] * m[6]);
			var i4:double  = -(m[4]  * m[10] * m[15]) + (m[4]  * m[11] * m[14]) + (m[8]  * m[6]  * m[15]) - (m[8]  * m[7]  * m[14]) - (m[12] * m[6]  * m[11]) + (m[12] * m[7] * m[10]);
			var i5:double  =  (m[0]  * m[10] * m[15]) - (m[0]  * m[11] * m[14]) - (m[8]  * m[2]  * m[15]) + (m[8]  * m[3]  * m[14]) + (m[12] * m[2]  * m[11]) - (m[12] * m[3] * m[10]);
			var i6:double  = -(m[0]  * m[6]  * m[15]) + (m[0]  * m[7]  * m[14]) + (m[4]  * m[2]  * m[15]) - (m[4]  * m[3]  * m[14]) - (m[12] * m[2]  * m[7])  + (m[12] * m[3] * m[6]);
			var i7:double  =  (m[0]  * m[6]  * m[11]) - (m[0]  * m[7]  * m[10]) - (m[4]  * m[2]  * m[11]) + (m[4]  * m[3]  * m[10]) + (m[8]  * m[2]  * m[7])  - (m[8]  * m[3] * m[6]);
			var i8:double  =  (m[4]  * m[9]  * m[15]) - (m[4]  * m[11] * m[13]) - (m[8]  * m[5]  * m[15]) + (m[8]  * m[7]  * m[13]) + (m[12] * m[5]  * m[11]) - (m[12] * m[7] * m[9]);
			var i9:double  = -(m[0]  * m[9]  * m[15]) + (m[0]  * m[11] * m[13]) + (m[8]  * m[1]  * m[15]) - (m[8]  * m[3]  * m[13]) - (m[12] * m[1]  * m[11]) + (m[12] * m[3] * m[9]);
			var i10:double =  (m[0]  * m[5]  * m[15]) - (m[0]  * m[7]  * m[13]) - (m[4]  * m[1]  * m[15]) + (m[4]  * m[3]  * m[13]) + (m[12] * m[1]  * m[7])  - (m[12] * m[3] * m[5]);
			var i11:double = -(m[0]  * m[5]  * m[11]) + (m[0]  * m[7]  * m[9])  + (m[4]  * m[1]  * m[11]) - (m[4]  * m[3]  * m[9])  - (m[8]  * m[1]  * m[7])  + (m[8]  * m[3] * m[5]);
			var i12:double = -(m[4]  * m[9]  * m[14]) + (m[4]  * m[10] * m[13]) + (m[8]  * m[5]  * m[14]) - (m[8]  * m[6]  * m[13]) - (m[12] * m[5]  * m[10]) + (m[12] * m[6] * m[9]);
			var i13:double =  (m[0]  * m[9]  * m[14]) - (m[0]  * m[10] * m[13]) - (m[8]  * m[1]  * m[14]) + (m[8]  * m[2]  * m[13]) + (m[12] * m[1]  * m[10]) - (m[12] * m[2] * m[9]);
			var i14:double = -(m[0]  * m[5]  * m[14]) + (m[0]  * m[6]  * m[13]) + (m[4]  * m[1]  * m[14]) - (m[4]  * m[2]  * m[13]) - (m[12] * m[1]  * m[6])  + (m[12] * m[2] * m[5]);
			var i15:double =  (m[0]  * m[5]  * m[10]) - (m[0]  * m[6]  * m[9])  - (m[4]  * m[1]  * m[10]) + (m[4]  * m[2]  * m[9])  + (m[8]  * m[1]  * m[6])  - (m[8]  * m[2] * m[5]);

			// compute determinant
			var d:Number = (m[0] * i0) + (m[1] * i4) + (m[2] * i8) + (m[3] * i12);
			if (d == 0)
				return false;

			d = 1.0 / d;

			// apply inverted determinant to matrix			                                                           
			m[0] = i0 * d;
			m[1] = i1 * d;
			m[2] = i2 * d;
			m[3] = i3 * d;
			m[4] = i4 * d;
			m[5] = i5 * d;
			m[6] = i6 * d;
			m[7] = i7 * d;
			m[8] = i8 * d;
			m[9] = i9 * d;
			m[10] = i10 * d;
			m[11] = i11 * d;
			m[12] = i12 * d;
			m[13] = i13 * d;
			m[14] = i14 * d;
			m[15] = i15 * d;
			return true;
		}
 	 	
		public function pointAt(pos:Vector3D, at:Vector3D = null, up:Vector3D = null):void {
			throw new System.NotImplementedException();
		}

		public function prepend(rhs:Matrix3D):void {
			concat(this, this, rhs);
		}
 	 	
		public function prependRotation(degrees:Number, axis:Vector3D, pivotPoint:Vector3D = null):void {
			// create matrix and prepend it
			createAxisAngleRotationMatrix(sTempMatrix, degrees, axis, pivotPoint);
			prepend(sTempMatrix);
		}
 	 	
		public function prependScale(xScale:Number, yScale:Number, zScale:Number):void {
			// create matrix and prepend it
			// $$TODO optimize this
			createScaleMatrix(sTempMatrix, xScale, yScale, zScale);
			prepend(sTempMatrix);
		}
 	 	
		public function prependTranslation(x:Number, y:Number, z:Number):void {
			// create matrix and prepend it
			// $$TODO optimize this
			createTranslationMatrix(sTempMatrix, x, y, z);
			prepend(sTempMatrix);
		}
		
		private static function radiansToDegrees(radians:Number):Number {
			return radians * 180.0 / System.Math.PI;
		}
 	 	
		public function recompose(components:Vector.<Vector3D>, orientationStyle:String = "eulerAngles"):Boolean {
			var translate:Vector3D=components[0];
			var rotate:Vector3D=components[1];
			var scale:Vector3D=components[2];

			this.identity();

			switch (orientationStyle)
			{
			case Orientation3D.EULER_ANGLES:
				{
					// $$TODO is this the right order?
					if (rotate.x != 0.0) 
					{
						this.appendRotation(radiansToDegrees(rotate.x), Vector3D.X_AXIS);
					}
					if (rotate.y != 0.0)
					{
						this.appendRotation(radiansToDegrees(rotate.y), Vector3D.Y_AXIS);
					}
					if (rotate.z != 0.0) 
					{
						this.appendRotation(radiansToDegrees(rotate.z), Vector3D.Z_AXIS);
					}
				}
				break;
			case Orientation3D.AXIS_ANGLE:
				{
					this.appendRotation(radiansToDegrees(rotate.w), rotate);
					break;
				}
			case Orientation3D.QUATERNION:
				throw new System.NotImplementedException();
			}

			// $$TODO is this the right order?
			this.appendScale(scale.x, scale.y, scale.z);

			// $$TODO is this the right order?
			this.appendTranslation(translate.x, translate.y, translate.z);

			return true;
		}
 	 	
		public function transformVector(v:Vector3D):Vector3D {
			var result:Vector3D = new Vector3D();
			var m:double[] = mData;
			result.x = (v.x * m[0]) + (v.y * m[4]) + (v.z * m[8]) + m[12];
			result.y = (v.x * m[1]) + (v.y * m[5]) + (v.z * m[9]) + m[13];
			result.z = (v.x * m[2]) + (v.y * m[6]) + (v.z * m[10]) + m[14];
			return result;
		}
 	 	
		public function transformVectors(vin:Vector.<Number>, vout:Vector.<Number>):void {

			var m:double[] = mData;

			var len:int = vin.length;
			for (var i:int=0; i < len; i+=3) {
				var x:Number = vin[i + 0];
				var y:Number = vin[i + 1];
				var z:Number = vin[i + 2];

				var ox:Number = (x * m[0]) + (y * m[4]) + (z * m[8]) + m[12];
				var oy:Number = (x * m[1]) + (y * m[5]) + (z * m[9]) + m[13];
				var oz:Number = (x * m[2]) + (y * m[6]) + (z * m[10]) + m[14];

				// write output
				vout[i + 0] = ox;
				vout[i + 1] = oy;
				vout[i + 2] = oz;
			}
		}
 	 	
		public function transpose():void {
			var oRawData:Vector.<Number> = this.rawData;
			rawData[1] = oRawData[4];
			rawData[2] = oRawData[8];
			rawData[3] = oRawData[12];
			rawData[4] = oRawData[1];
			rawData[6] = oRawData[9];
			rawData[7] = oRawData[13];
			rawData[8] = oRawData[2];
			rawData[9] = oRawData[6];
			rawData[11] = oRawData[14];
			rawData[12] = oRawData[3];
			rawData[13] = oRawData[7];
			rawData[14] = oRawData[11];
		}
		
		public var mData:double[] = new double[16];
	}

}
