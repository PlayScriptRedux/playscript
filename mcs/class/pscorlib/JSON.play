// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {

	import System.*;
	import flash.utils.ByteArray;
	import flash.utils.Dictionary;

	public static class JSON {

		private static var sJsonLookup:Dictionary = new Dictionary();
	
		public static function parse(text:String, reviver:Function = null):Object {
			var cached:Object = sJsonLookup[text];
			if (cached != null) {
				if (cached is Func.<String, Object>) {
					var func:Func.<String, Object> = Func.<String, Object>(cached);
					// invoke function to get object graph
					var obj:Object = func.Invoke(text);
					// store amf in cache (this assumes amf is immutable)
					sJsonLookup[text] = obj;
					sJsonLookup[obj] = text;
					return obj;
				}

				// return cached object
				return cached;
			}

			PlayScript.Profiler.Begin("json-parse");
			var o:Object = MiniJson.Json.Parse(text);
			PlayScript.Profiler.End("json-parse");
			return o;
		}

		public static function stringify(value:Object, replacer:* = null, space:* = null):String {
			var jsonKey:Object = sJsonLookup[value];
			if (jsonKey is String) {
				return String(jsonKey);
			}

			PlayScript.Profiler.Begin("json-stringify");
			var s:String = MiniJson.Json.Stringify(value);
			PlayScript.Profiler.End("json-stringify");
			return s;
		}

		public static function storeJsonParseFunc(jsonKey:String, func:Func.<String, Object>):void {
			// store key -> parse function data
			sJsonLookup[jsonKey] = func;
		}
	}
}
