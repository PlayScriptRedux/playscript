// Copyright 2013 Zynga Inc.
//	
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//		
//      Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//      See the License for the specific language governing permissions and
//      limitations under the License.

package {

	import System.*;
	import flash.utils.ByteArray;
	import flash.utils.Dictionary;

	public static class JSON {

		// TODO: This is retaining
		private static var sParseFuncLookup:System.Collections.Generic.Dictionary.<String,Func.<String, Object>> = 
			new System.Collections.Generic.Dictionary.<String,Func.<String, Object>>();
	
		public static function parse(text:String, reviver:Function = null):Object {

			// Check to see if we should use a different JSON provider (like AMF or BinJSON).  First char will be '$'.
			var parseFunc:Func.<String, Object>;
			if (text.StartsWith("$")) {
				if (sParseFuncLookup.TryGetValue(text, out parseFunc)) {
					sParseFuncLookup.Remove(text);
					var obj:Object = parseFunc(text);
					return obj;
				} else {
					throw new InvalidOperationException("The amf or BinJSON URL for " + text + 
					                                    " has already been parsed.  Are you trying to parse it twice?");
				}
			}

			PlayScript.Profiler.Begin("json-parse");
			var o:Object = MiniJson.Json.Parse(text);
			PlayScript.Profiler.End("json-parse");
			return o;
		}

		public static function stringify(value:Object, replacer:* = null, space:* = null):String {

			PlayScript.Profiler.Begin("json-stringify");
			var s:String = MiniJson.Json.Stringify(value);
			PlayScript.Profiler.End("json-stringify");
			return s;
		}

		public static function storeJsonParseFunc(jsonKey:String, func:Func.<String, Object>):void {
			if (!jsonKey.StartsWith("$"))
				throw new Error("Invalid json key");
			// store key -> parse function data
			sParseFuncLookup.Add(jsonKey, func);
		}

	}
}
